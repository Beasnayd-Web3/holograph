/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type OperatorJobStruct = {
  pod: PromiseOrValue<BigNumberish>;
  blockTimes: PromiseOrValue<BigNumberish>;
  operator: PromiseOrValue<string>;
  startBlock: PromiseOrValue<BigNumberish>;
  startTimestamp: PromiseOrValue<BigNumberish>;
  fallbackOperators: [
    PromiseOrValue<BigNumberish>,
    PromiseOrValue<BigNumberish>,
    PromiseOrValue<BigNumberish>,
    PromiseOrValue<BigNumberish>,
    PromiseOrValue<BigNumberish>
  ];
};

export type OperatorJobStructOutput = [
  number,
  number,
  string,
  number,
  BigNumber,
  [number, number, number, number, number]
] & {
  pod: number;
  blockTimes: number;
  operator: string;
  startBlock: number;
  startTimestamp: BigNumber;
  fallbackOperators: [number, number, number, number, number];
};

export interface HolographOperatorInterface extends utils.Interface {
  functions: {
    "admin()": FunctionFragment;
    "adminCall(address,bytes)": FunctionFragment;
    "bondUtilityToken(address,uint256,uint256)": FunctionFragment;
    "crossChainMessage(bytes)": FunctionFragment;
    "executeJob(bytes)": FunctionFragment;
    "getAdmin()": FunctionFragment;
    "getBondedAmount(address)": FunctionFragment;
    "getBondedPod(address)": FunctionFragment;
    "getBondedPodIndex(address)": FunctionFragment;
    "getBridge()": FunctionFragment;
    "getHolograph()": FunctionFragment;
    "getInterfaces()": FunctionFragment;
    "getJobDetails(bytes32)": FunctionFragment;
    "getMessageFee(uint32,uint256,uint256,bytes)": FunctionFragment;
    "getMessagingModule()": FunctionFragment;
    "getMinGasPrice()": FunctionFragment;
    "getPodBondAmounts(uint256)": FunctionFragment;
    "getPodOperators(uint256,uint256,uint256)": FunctionFragment;
    "getPodOperators(uint256)": FunctionFragment;
    "getPodOperatorsLength(uint256)": FunctionFragment;
    "getRegistry()": FunctionFragment;
    "getTotalPods()": FunctionFragment;
    "getUtilityToken()": FunctionFragment;
    "init(bytes)": FunctionFragment;
    "jobEstimator(bytes)": FunctionFragment;
    "nonRevertingBridgeCall(address,bytes)": FunctionFragment;
    "recoverJob(bytes)": FunctionFragment;
    "send(uint256,uint256,uint32,address,uint256,address,bytes)": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setBridge(address)": FunctionFragment;
    "setHolograph(address)": FunctionFragment;
    "setInterfaces(address)": FunctionFragment;
    "setMessagingModule(address)": FunctionFragment;
    "setMinGasPrice(uint256)": FunctionFragment;
    "setRegistry(address)": FunctionFragment;
    "setUtilityToken(address)": FunctionFragment;
    "topupUtilityToken(address,uint256)": FunctionFragment;
    "unbondUtilityToken(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "admin"
      | "adminCall"
      | "bondUtilityToken"
      | "crossChainMessage"
      | "executeJob"
      | "getAdmin"
      | "getBondedAmount"
      | "getBondedPod"
      | "getBondedPodIndex"
      | "getBridge"
      | "getHolograph"
      | "getInterfaces"
      | "getJobDetails"
      | "getMessageFee"
      | "getMessagingModule"
      | "getMinGasPrice"
      | "getPodBondAmounts"
      | "getPodOperators(uint256,uint256,uint256)"
      | "getPodOperators(uint256)"
      | "getPodOperatorsLength"
      | "getRegistry"
      | "getTotalPods"
      | "getUtilityToken"
      | "init"
      | "jobEstimator"
      | "nonRevertingBridgeCall"
      | "recoverJob"
      | "send"
      | "setAdmin"
      | "setBridge"
      | "setHolograph"
      | "setInterfaces"
      | "setMessagingModule"
      | "setMinGasPrice"
      | "setRegistry"
      | "setUtilityToken"
      | "topupUtilityToken"
      | "unbondUtilityToken"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "adminCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "bondUtilityToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "crossChainMessage",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeJob",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "getAdmin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBondedAmount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBondedPod",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBondedPodIndex",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "getBridge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getHolograph",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInterfaces",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getJobDetails",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMessageFee",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getMessagingModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinGasPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPodBondAmounts",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPodOperators(uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPodOperators(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPodOperatorsLength",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPods",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUtilityToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "jobEstimator",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "nonRevertingBridgeCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverJob",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBridge",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setHolograph",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterfaces",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMessagingModule",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinGasPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRegistry",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUtilityToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "topupUtilityToken",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "unbondUtilityToken",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "adminCall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bondUtilityToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "crossChainMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "executeJob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBondedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBondedPod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBondedPodIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBridge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getHolograph",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInterfaces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getJobDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMessageFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMessagingModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinGasPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPodBondAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPodOperators(uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPodOperators(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPodOperatorsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPods",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUtilityToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "jobEstimator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nonRevertingBridgeCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "recoverJob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBridge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setHolograph",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterfaces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMessagingModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinGasPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUtilityToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "topupUtilityToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unbondUtilityToken",
    data: BytesLike
  ): Result;

  events: {
    "AvailableOperatorJob(bytes32,bytes)": EventFragment;
    "CrossChainMessageSent(bytes32)": EventFragment;
    "FailedOperatorJob(bytes32)": EventFragment;
    "FinishedOperatorJob(bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AvailableOperatorJob"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CrossChainMessageSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FailedOperatorJob"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FinishedOperatorJob"): EventFragment;
}

export interface AvailableOperatorJobEventObject {
  jobHash: string;
  payload: string;
}
export type AvailableOperatorJobEvent = TypedEvent<
  [string, string],
  AvailableOperatorJobEventObject
>;

export type AvailableOperatorJobEventFilter =
  TypedEventFilter<AvailableOperatorJobEvent>;

export interface CrossChainMessageSentEventObject {
  messageHash: string;
}
export type CrossChainMessageSentEvent = TypedEvent<
  [string],
  CrossChainMessageSentEventObject
>;

export type CrossChainMessageSentEventFilter =
  TypedEventFilter<CrossChainMessageSentEvent>;

export interface FailedOperatorJobEventObject {
  jobHash: string;
}
export type FailedOperatorJobEvent = TypedEvent<
  [string],
  FailedOperatorJobEventObject
>;

export type FailedOperatorJobEventFilter =
  TypedEventFilter<FailedOperatorJobEvent>;

export interface FinishedOperatorJobEventObject {
  jobHash: string;
  operator: string;
}
export type FinishedOperatorJobEvent = TypedEvent<
  [string, string],
  FinishedOperatorJobEventObject
>;

export type FinishedOperatorJobEventFilter =
  TypedEventFilter<FinishedOperatorJobEvent>;

export interface HolographOperator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HolographOperatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    admin(overrides?: CallOverrides): Promise<[string]>;

    adminCall(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bondUtilityToken(
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      pod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    crossChainMessage(
      bridgeInRequestPayload: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeJob(
      bridgeInRequestPayload: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAdmin(
      overrides?: CallOverrides
    ): Promise<[string] & { adminAddress: string }>;

    getBondedAmount(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    getBondedPod(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { pod: BigNumber }>;

    getBondedPodIndex(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { index: BigNumber }>;

    getBridge(
      overrides?: CallOverrides
    ): Promise<[string] & { bridge: string }>;

    getHolograph(
      overrides?: CallOverrides
    ): Promise<[string] & { holograph: string }>;

    getInterfaces(
      overrides?: CallOverrides
    ): Promise<[string] & { interfaces: string }>;

    getJobDetails(
      jobHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[OperatorJobStructOutput]>;

    getMessageFee(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getMessagingModule(
      overrides?: CallOverrides
    ): Promise<[string] & { messagingModule: string }>;

    getMinGasPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { minGasPrice: BigNumber }>;

    getPodBondAmounts(
      pod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { base: BigNumber; current: BigNumber }
    >;

    "getPodOperators(uint256,uint256,uint256)"(
      pod: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      length: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { operators: string[] }>;

    "getPodOperators(uint256)"(
      pod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { operators: string[] }>;

    getPodOperatorsLength(
      pod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRegistry(
      overrides?: CallOverrides
    ): Promise<[string] & { registry: string }>;

    getTotalPods(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalPods: BigNumber }>;

    getUtilityToken(
      overrides?: CallOverrides
    ): Promise<[string] & { utilityToken: string }>;

    init(
      initPayload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    jobEstimator(
      bridgeInRequestPayload: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nonRevertingBridgeCall(
      msgSender: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    recoverJob(
      bridgeInRequestPayload: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    send(
      gasLimit: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      toChain: PromiseOrValue<BigNumberish>,
      msgSender: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      holographableContract: PromiseOrValue<string>,
      bridgeOutPayload: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      adminAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBridge(
      bridge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setHolograph(
      holograph: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInterfaces(
      interfaces: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMessagingModule(
      messagingModule: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinGasPrice(
      minGasPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRegistry(
      registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUtilityToken(
      utilityToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    topupUtilityToken(
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unbondUtilityToken(
      operator: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  admin(overrides?: CallOverrides): Promise<string>;

  adminCall(
    target: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bondUtilityToken(
    operator: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    pod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  crossChainMessage(
    bridgeInRequestPayload: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeJob(
    bridgeInRequestPayload: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAdmin(overrides?: CallOverrides): Promise<string>;

  getBondedAmount(
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBondedPod(
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBondedPodIndex(
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBridge(overrides?: CallOverrides): Promise<string>;

  getHolograph(overrides?: CallOverrides): Promise<string>;

  getInterfaces(overrides?: CallOverrides): Promise<string>;

  getJobDetails(
    jobHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<OperatorJobStructOutput>;

  getMessageFee(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getMessagingModule(overrides?: CallOverrides): Promise<string>;

  getMinGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getPodBondAmounts(
    pod: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { base: BigNumber; current: BigNumber }>;

  "getPodOperators(uint256,uint256,uint256)"(
    pod: PromiseOrValue<BigNumberish>,
    index: PromiseOrValue<BigNumberish>,
    length: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getPodOperators(uint256)"(
    pod: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getPodOperatorsLength(
    pod: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRegistry(overrides?: CallOverrides): Promise<string>;

  getTotalPods(overrides?: CallOverrides): Promise<BigNumber>;

  getUtilityToken(overrides?: CallOverrides): Promise<string>;

  init(
    initPayload: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  jobEstimator(
    bridgeInRequestPayload: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nonRevertingBridgeCall(
    msgSender: PromiseOrValue<string>,
    payload: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  recoverJob(
    bridgeInRequestPayload: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  send(
    gasLimit: PromiseOrValue<BigNumberish>,
    gasPrice: PromiseOrValue<BigNumberish>,
    toChain: PromiseOrValue<BigNumberish>,
    msgSender: PromiseOrValue<string>,
    nonce: PromiseOrValue<BigNumberish>,
    holographableContract: PromiseOrValue<string>,
    bridgeOutPayload: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    adminAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBridge(
    bridge: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setHolograph(
    holograph: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInterfaces(
    interfaces: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMessagingModule(
    messagingModule: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinGasPrice(
    minGasPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRegistry(
    registry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUtilityToken(
    utilityToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  topupUtilityToken(
    operator: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unbondUtilityToken(
    operator: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    adminCall(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    bondUtilityToken(
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      pod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    crossChainMessage(
      bridgeInRequestPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeJob(
      bridgeInRequestPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAdmin(overrides?: CallOverrides): Promise<string>;

    getBondedAmount(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBondedPod(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBondedPodIndex(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBridge(overrides?: CallOverrides): Promise<string>;

    getHolograph(overrides?: CallOverrides): Promise<string>;

    getInterfaces(overrides?: CallOverrides): Promise<string>;

    getJobDetails(
      jobHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<OperatorJobStructOutput>;

    getMessageFee(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getMessagingModule(overrides?: CallOverrides): Promise<string>;

    getMinGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getPodBondAmounts(
      pod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { base: BigNumber; current: BigNumber }
    >;

    "getPodOperators(uint256,uint256,uint256)"(
      pod: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      length: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getPodOperators(uint256)"(
      pod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getPodOperatorsLength(
      pod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegistry(overrides?: CallOverrides): Promise<string>;

    getTotalPods(overrides?: CallOverrides): Promise<BigNumber>;

    getUtilityToken(overrides?: CallOverrides): Promise<string>;

    init(
      initPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    jobEstimator(
      bridgeInRequestPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonRevertingBridgeCall(
      msgSender: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    recoverJob(
      bridgeInRequestPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    send(
      gasLimit: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      toChain: PromiseOrValue<BigNumberish>,
      msgSender: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      holographableContract: PromiseOrValue<string>,
      bridgeOutPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAdmin(
      adminAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBridge(
      bridge: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setHolograph(
      holograph: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setInterfaces(
      interfaces: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMessagingModule(
      messagingModule: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinGasPrice(
      minGasPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRegistry(
      registry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUtilityToken(
      utilityToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    topupUtilityToken(
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unbondUtilityToken(
      operator: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AvailableOperatorJob(bytes32,bytes)"(
      jobHash?: null,
      payload?: null
    ): AvailableOperatorJobEventFilter;
    AvailableOperatorJob(
      jobHash?: null,
      payload?: null
    ): AvailableOperatorJobEventFilter;

    "CrossChainMessageSent(bytes32)"(
      messageHash?: null
    ): CrossChainMessageSentEventFilter;
    CrossChainMessageSent(messageHash?: null): CrossChainMessageSentEventFilter;

    "FailedOperatorJob(bytes32)"(jobHash?: null): FailedOperatorJobEventFilter;
    FailedOperatorJob(jobHash?: null): FailedOperatorJobEventFilter;

    "FinishedOperatorJob(bytes32,address)"(
      jobHash?: null,
      operator?: null
    ): FinishedOperatorJobEventFilter;
    FinishedOperatorJob(
      jobHash?: null,
      operator?: null
    ): FinishedOperatorJobEventFilter;
  };

  estimateGas: {
    admin(overrides?: CallOverrides): Promise<BigNumber>;

    adminCall(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bondUtilityToken(
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      pod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    crossChainMessage(
      bridgeInRequestPayload: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeJob(
      bridgeInRequestPayload: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    getBondedAmount(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBondedPod(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBondedPodIndex(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBridge(overrides?: CallOverrides): Promise<BigNumber>;

    getHolograph(overrides?: CallOverrides): Promise<BigNumber>;

    getInterfaces(overrides?: CallOverrides): Promise<BigNumber>;

    getJobDetails(
      jobHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMessageFee(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMessagingModule(overrides?: CallOverrides): Promise<BigNumber>;

    getMinGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getPodBondAmounts(
      pod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPodOperators(uint256,uint256,uint256)"(
      pod: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      length: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPodOperators(uint256)"(
      pod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPodOperatorsLength(
      pod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalPods(overrides?: CallOverrides): Promise<BigNumber>;

    getUtilityToken(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      initPayload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    jobEstimator(
      bridgeInRequestPayload: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nonRevertingBridgeCall(
      msgSender: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    recoverJob(
      bridgeInRequestPayload: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    send(
      gasLimit: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      toChain: PromiseOrValue<BigNumberish>,
      msgSender: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      holographableContract: PromiseOrValue<string>,
      bridgeOutPayload: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAdmin(
      adminAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBridge(
      bridge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setHolograph(
      holograph: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInterfaces(
      interfaces: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMessagingModule(
      messagingModule: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinGasPrice(
      minGasPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRegistry(
      registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUtilityToken(
      utilityToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    topupUtilityToken(
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unbondUtilityToken(
      operator: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adminCall(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bondUtilityToken(
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      pod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    crossChainMessage(
      bridgeInRequestPayload: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeJob(
      bridgeInRequestPayload: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBondedAmount(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBondedPod(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBondedPodIndex(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getHolograph(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInterfaces(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getJobDetails(
      jobHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMessageFee(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMessagingModule(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinGasPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPodBondAmounts(
      pod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPodOperators(uint256,uint256,uint256)"(
      pod: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      length: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPodOperators(uint256)"(
      pod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPodOperatorsLength(
      pod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalPods(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUtilityToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      initPayload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    jobEstimator(
      bridgeInRequestPayload: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nonRevertingBridgeCall(
      msgSender: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    recoverJob(
      bridgeInRequestPayload: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    send(
      gasLimit: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      toChain: PromiseOrValue<BigNumberish>,
      msgSender: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      holographableContract: PromiseOrValue<string>,
      bridgeOutPayload: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      adminAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBridge(
      bridge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setHolograph(
      holograph: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInterfaces(
      interfaces: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMessagingModule(
      messagingModule: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinGasPrice(
      minGasPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRegistry(
      registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUtilityToken(
      utilityToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    topupUtilityToken(
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unbondUtilityToken(
      operator: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
