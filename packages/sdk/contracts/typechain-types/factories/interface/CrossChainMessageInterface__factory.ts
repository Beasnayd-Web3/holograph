/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  CrossChainMessageInterface,
  CrossChainMessageInterfaceInterface,
} from "../../interface/CrossChainMessageInterface";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint32",
        name: "toChain",
        type: "uint32",
      },
      {
        internalType: "uint256",
        name: "gasLimit",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "gasPrice",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "crossChainPayload",
        type: "bytes",
      },
    ],
    name: "getHlgFee",
    outputs: [
      {
        internalType: "uint256",
        name: "hlgFee",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "toChain",
        type: "uint32",
      },
      {
        internalType: "uint256",
        name: "gasLimit",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "gasPrice",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "crossChainPayload",
        type: "bytes",
      },
    ],
    name: "getMessageFee",
    outputs: [
      {
        internalType: "uint256",
        name: "hlgFee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "msgFee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "dstGasPrice",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "gasLimit",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "gasPrice",
        type: "uint256",
      },
      {
        internalType: "uint32",
        name: "toChain",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "msgSender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "msgValue",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "crossChainPayload",
        type: "bytes",
      },
    ],
    name: "send",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

export class CrossChainMessageInterface__factory {
  static readonly abi = _abi;
  static createInterface(): CrossChainMessageInterfaceInterface {
    return new utils.Interface(_abi) as CrossChainMessageInterfaceInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CrossChainMessageInterface {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as CrossChainMessageInterface;
  }
}
