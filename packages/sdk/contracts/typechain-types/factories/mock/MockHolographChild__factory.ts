/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  MockHolographChild,
  MockHolographChildInterface,
} from "../../mock/MockHolographChild";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "admin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "adminCall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "emptyFunction",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getAdmin",
    outputs: [
      {
        internalType: "address",
        name: "adminAddress",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBridge",
    outputs: [
      {
        internalType: "address",
        name: "bridge",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getChainId",
    outputs: [
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getFactory",
    outputs: [
      {
        internalType: "address",
        name: "factory",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getHolographChainId",
    outputs: [
      {
        internalType: "uint32",
        name: "holographChainId",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getInterfaces",
    outputs: [
      {
        internalType: "address",
        name: "interfaces",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getOperator",
    outputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRegistry",
    outputs: [
      {
        internalType: "address",
        name: "registry",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTreasury",
    outputs: [
      {
        internalType: "address",
        name: "treasury",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getUtilityToken",
    outputs: [
      {
        internalType: "address",
        name: "utilityToken",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "initPayload",
        type: "bytes",
      },
    ],
    name: "init",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "adminAddress",
        type: "address",
      },
    ],
    name: "setAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "bridge",
        type: "address",
      },
    ],
    name: "setBridge",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
    ],
    name: "setChainId",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "factory",
        type: "address",
      },
    ],
    name: "setFactory",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "holographChainId",
        type: "uint32",
      },
    ],
    name: "setHolographChainId",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "interfaces",
        type: "address",
      },
    ],
    name: "setInterfaces",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "setOperator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registry",
        type: "address",
      },
    ],
    name: "setRegistry",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "treasury",
        type: "address",
      },
    ],
    name: "setTreasury",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "utilityToken",
        type: "address",
      },
    ],
    name: "setUtilityToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50611559806100206000396000f3fe60806040526004361061018e5760003560e01c80639013ae08116100d6578063da8292d91161007f578063ef0e2ff411610059578063ef0e2ff41461056c578063f0f442601461058c578063f851a440146105ac57600080fd5b8063da8292d9146104e4578063e7f43c6814610504578063ebac15f91461053857600080fd5b8063bf64a82d116100b0578063bf64a82d1461048f578063c8b29809146104a2578063c910325b146104c457600080fd5b80639013ae081461042f578063a91ee0dc1461044f578063b3ab15fb1461046f57600080fd5b80635ab1bd5311610138578063704b6c0211610112578063704b6c02146103bb57806388cc58e4146103db5780638dd148021461040f57600080fd5b80635ab1bd53146103315780635bb47808146103655780636e9960c31461038757600080fd5b8063381b5f4611610169578063381b5f46146102685780633b19e84a146102ac5780634ddf47d4146102e057600080fd5b80626266791461019d5780630fffbaf3146101f75780633408e4701461022b57600080fd5b3661019857600080fd5b600080fd5b3480156101a957600080fd5b507fbf76518d46db472b71aa7677a0908b8016f3dee568415ffa24055f9a670f9c37545b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b34801561020357600080fd5b507feb87cbb21687feb327e3d58c6c16d552231d12c7a0e8115042a4165fac8a77f9546101cd565b34801561023757600080fd5b507f7651bfc11f7485d07ab2b41c1312e2007c8cb7efb0f7352a6dee4a1153eebab2546040519081526020016101ee565b34801561027457600080fd5b507fd840a780c26e07edc6e1ee2eaa6f134ed5488dbd762614116653cee8542a38445460405163ffffffff90911681526020016101ee565b3480156102b857600080fd5b507f4215e7a38d75164ca078bbd61d0992cdeb1ba16f3b3ead5944966d3e4080e8b6546101cd565b3480156102ec57600080fd5b506103006102fb36600461121a565b6105c1565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016101ee565b34801561033d57600080fd5b507fce8e75d5c5227ce29a4ee170160bb296e5dea6934b80a9bd723f7ef1e7c850e7546101cd565b34801561037157600080fd5b5061038561038036600461130e565b61083d565b005b34801561039357600080fd5b507f3f106594dc74eeef980dae234cde8324dc2497b13d27a0c59e55bd2ca10a07c9546101cd565b3480156103c757600080fd5b506103856103d636600461130e565b610917565b3480156103e757600080fd5b507fa49f20855ba576e09d13c8041c8039fa655356ea27f6c40f1ec46a4301cd5b23546101cd565b34801561041b57600080fd5b5061038561042a36600461130e565b6109f1565b34801561043b57600080fd5b5061038561044a36600461130e565b610acb565b34801561045b57600080fd5b5061038561046a36600461130e565b610ba5565b34801561047b57600080fd5b5061038561048a36600461130e565b610c7f565b61038561049d366004611332565b610d59565b3480156104ae57600080fd5b506104b7610e34565b6040516101ee91906113b7565b3480156104d057600080fd5b506103856104df36600461143c565b610e54565b3480156104f057600080fd5b506103856104ff36600461130e565b610f2e565b34801561051057600080fd5b507f7caba557ad34138fa3b7e43fb574e0e6cc10481c3073e0dffbc560db81b5c60f546101cd565b34801561054457600080fd5b507fbd3084b8c09da87ad159c247a60e209784196be2530cecbbd8f337fdd1848827546101cd565b34801561057857600080fd5b50610385610587366004611459565b611008565b34801561059857600080fd5b506103856105a736600461130e565b6110e2565b3480156105b857600080fd5b506101cd6111bc565b60006105eb7f4e5f991bca30eca2d4643aaefa807e88f96a4a97398933d572a3c0d973004a015490565b15610657576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f484f4c4f47524150483a20616c726561647920696e697469616c697a6564000060448201526064015b60405180910390fd5b600080600080600080600080898060200190518101906106779190611472565b97509750975097509750975097509750327f3f106594dc74eeef980dae234cde8324dc2497b13d27a0c59e55bd2ca10a07c955467f7651bfc11f7485d07ab2b41c1312e2007c8cb7efb0f7352a6dee4a1153eebab255877fd840a780c26e07edc6e1ee2eaa6f134ed5488dbd762614116653cee8542a384455867feb87cbb21687feb327e3d58c6c16d552231d12c7a0e8115042a4165fac8a77f955857fa49f20855ba576e09d13c8041c8039fa655356ea27f6c40f1ec46a4301cd5b2355847fbd3084b8c09da87ad159c247a60e209784196be2530cecbbd8f337fdd184882755837f7caba557ad34138fa3b7e43fb574e0e6cc10481c3073e0dffbc560db81b5c60f55827fce8e75d5c5227ce29a4ee170160bb296e5dea6934b80a9bd723f7ef1e7c850e755817f4215e7a38d75164ca078bbd61d0992cdeb1ba16f3b3ead5944966d3e4080e8b655807fbf76518d46db472b71aa7677a0908b8016f3dee568415ffa24055f9a670f9c375561080e60017f4e5f991bca30eca2d4643aaefa807e88f96a4a97398933d572a3c0d973004a0155565b507f4ddf47d4000000000000000000000000000000000000000000000000000000009998505050505050505050565b7f3f106594dc74eeef980dae234cde8324dc2497b13d27a0c59e55bd2ca10a07c95473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f484f4c4f47524150483a2061646d696e206f6e6c792066756e6374696f6e0000604482015260640161064e565b7fa49f20855ba576e09d13c8041c8039fa655356ea27f6c40f1ec46a4301cd5b2355565b7f3f106594dc74eeef980dae234cde8324dc2497b13d27a0c59e55bd2ca10a07c95473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f484f4c4f47524150483a2061646d696e206f6e6c792066756e6374696f6e0000604482015260640161064e565b7f3f106594dc74eeef980dae234cde8324dc2497b13d27a0c59e55bd2ca10a07c955565b7f3f106594dc74eeef980dae234cde8324dc2497b13d27a0c59e55bd2ca10a07c95473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610aa7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f484f4c4f47524150483a2061646d696e206f6e6c792066756e6374696f6e0000604482015260640161064e565b7feb87cbb21687feb327e3d58c6c16d552231d12c7a0e8115042a4165fac8a77f955565b7f3f106594dc74eeef980dae234cde8324dc2497b13d27a0c59e55bd2ca10a07c95473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b81576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f484f4c4f47524150483a2061646d696e206f6e6c792066756e6374696f6e0000604482015260640161064e565b7fbf76518d46db472b71aa7677a0908b8016f3dee568415ffa24055f9a670f9c3755565b7f3f106594dc74eeef980dae234cde8324dc2497b13d27a0c59e55bd2ca10a07c95473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c5b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f484f4c4f47524150483a2061646d696e206f6e6c792066756e6374696f6e0000604482015260640161064e565b7fce8e75d5c5227ce29a4ee170160bb296e5dea6934b80a9bd723f7ef1e7c850e755565b7f3f106594dc74eeef980dae234cde8324dc2497b13d27a0c59e55bd2ca10a07c95473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d35576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f484f4c4f47524150483a2061646d696e206f6e6c792066756e6374696f6e0000604482015260640161064e565b7f7caba557ad34138fa3b7e43fb574e0e6cc10481c3073e0dffbc560db81b5c60f55565b7f3f106594dc74eeef980dae234cde8324dc2497b13d27a0c59e55bd2ca10a07c95473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e0f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f484f4c4f47524150483a2061646d696e206f6e6c792066756e6374696f6e0000604482015260640161064e565b808260003760008082600034875af13d6000803e808015610e2f573d6000f35b3d6000fd5b60606040518060600160405280602a8152602001611523602a9139905090565b7f3f106594dc74eeef980dae234cde8324dc2497b13d27a0c59e55bd2ca10a07c95473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f0a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f484f4c4f47524150483a2061646d696e206f6e6c792066756e6374696f6e0000604482015260640161064e565b7fd840a780c26e07edc6e1ee2eaa6f134ed5488dbd762614116653cee8542a384455565b7f3f106594dc74eeef980dae234cde8324dc2497b13d27a0c59e55bd2ca10a07c95473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610fe4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f484f4c4f47524150483a2061646d696e206f6e6c792066756e6374696f6e0000604482015260640161064e565b7fbd3084b8c09da87ad159c247a60e209784196be2530cecbbd8f337fdd184882755565b7f3f106594dc74eeef980dae234cde8324dc2497b13d27a0c59e55bd2ca10a07c95473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f484f4c4f47524150483a2061646d696e206f6e6c792066756e6374696f6e0000604482015260640161064e565b7f7651bfc11f7485d07ab2b41c1312e2007c8cb7efb0f7352a6dee4a1153eebab255565b7f3f106594dc74eeef980dae234cde8324dc2497b13d27a0c59e55bd2ca10a07c95473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611198576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f484f4c4f47524150483a2061646d696e206f6e6c792066756e6374696f6e0000604482015260640161064e565b7f4215e7a38d75164ca078bbd61d0992cdeb1ba16f3b3ead5944966d3e4080e8b655565b60006111e67f3f106594dc74eeef980dae234cde8324dc2497b13d27a0c59e55bd2ca10a07c95490565b905090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020828403121561122c57600080fd5b813567ffffffffffffffff8082111561124457600080fd5b818401915084601f83011261125857600080fd5b81358181111561126a5761126a6111eb565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156112b0576112b06111eb565b816040528281528760208487010111156112c957600080fd5b826020860160208301376000928101602001929092525095945050505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461130b57600080fd5b50565b60006020828403121561132057600080fd5b813561132b816112e9565b9392505050565b60008060006040848603121561134757600080fd5b8335611352816112e9565b9250602084013567ffffffffffffffff8082111561136f57600080fd5b818601915086601f83011261138357600080fd5b81358181111561139257600080fd5b8760208285010111156113a457600080fd5b6020830194508093505050509250925092565b600060208083528351808285015260005b818110156113e4578581018301518582016040015282016113c8565b818111156113f6576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b63ffffffff8116811461130b57600080fd5b60006020828403121561144e57600080fd5b813561132b8161142a565b60006020828403121561146b57600080fd5b5035919050565b600080600080600080600080610100898b03121561148f57600080fd5b885161149a8161142a565b60208a01519098506114ab816112e9565b60408a01519097506114bc816112e9565b60608a01519096506114cd816112e9565b60808a01519095506114de816112e9565b60a08a01519094506114ef816112e9565b60c08a0151909350611500816112e9565b60e08a0151909250611511816112e9565b80915050929598509295989093965056fe6f6e20707572706f736520746f2072656d6f766520766572696669636174696f6e20636f6e666c696374a164736f6c634300080d000a";

type MockHolographChildConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockHolographChildConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockHolographChild__factory extends ContractFactory {
  constructor(...args: MockHolographChildConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockHolographChild> {
    return super.deploy(overrides || {}) as Promise<MockHolographChild>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockHolographChild {
    return super.attach(address) as MockHolographChild;
  }
  override connect(signer: Signer): MockHolographChild__factory {
    return super.connect(signer) as MockHolographChild__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockHolographChildInterface {
    return new utils.Interface(_abi) as MockHolographChildInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockHolographChild {
    return new Contract(address, _abi, signerOrProvider) as MockHolographChild;
  }
}
