/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type DeploymentConfigStruct = {
  contractType: PromiseOrValue<BytesLike>;
  chainType: PromiseOrValue<BigNumberish>;
  salt: PromiseOrValue<BytesLike>;
  byteCode: PromiseOrValue<BytesLike>;
  initCode: PromiseOrValue<BytesLike>;
};

export type DeploymentConfigStructOutput = [
  string,
  number,
  string,
  string,
  string
] & {
  contractType: string;
  chainType: number;
  salt: string;
  byteCode: string;
  initCode: string;
};

export type VerificationStruct = {
  r: PromiseOrValue<BytesLike>;
  s: PromiseOrValue<BytesLike>;
  v: PromiseOrValue<BigNumberish>;
};

export type VerificationStructOutput = [string, string, number] & {
  r: string;
  s: string;
  v: number;
};

export interface HolographFactoryInterfaceInterface extends utils.Interface {
  functions: {
    "deployHolographableContract((bytes32,uint32,bytes32,bytes,bytes),(bytes32,bytes32,uint8),address)": FunctionFragment;
    "getHolograph()": FunctionFragment;
    "getRegistry()": FunctionFragment;
    "setHolograph(address)": FunctionFragment;
    "setRegistry(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deployHolographableContract"
      | "getHolograph"
      | "getRegistry"
      | "setHolograph"
      | "setRegistry"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deployHolographableContract",
    values: [DeploymentConfigStruct, VerificationStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getHolograph",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setHolograph",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRegistry",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "deployHolographableContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHolograph",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHolograph",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRegistry",
    data: BytesLike
  ): Result;

  events: {
    "BridgeableContractDeployed(address,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BridgeableContractDeployed"): EventFragment;
}

export interface BridgeableContractDeployedEventObject {
  contractAddress: string;
  hash: string;
}
export type BridgeableContractDeployedEvent = TypedEvent<
  [string, string],
  BridgeableContractDeployedEventObject
>;

export type BridgeableContractDeployedEventFilter =
  TypedEventFilter<BridgeableContractDeployedEvent>;

export interface HolographFactoryInterface extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HolographFactoryInterfaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deployHolographableContract(
      config: DeploymentConfigStruct,
      signature: VerificationStruct,
      signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getHolograph(
      overrides?: CallOverrides
    ): Promise<[string] & { holograph: string }>;

    getRegistry(
      overrides?: CallOverrides
    ): Promise<[string] & { registry: string }>;

    setHolograph(
      holograph: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRegistry(
      registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  deployHolographableContract(
    config: DeploymentConfigStruct,
    signature: VerificationStruct,
    signer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getHolograph(overrides?: CallOverrides): Promise<string>;

  getRegistry(overrides?: CallOverrides): Promise<string>;

  setHolograph(
    holograph: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRegistry(
    registry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    deployHolographableContract(
      config: DeploymentConfigStruct,
      signature: VerificationStruct,
      signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getHolograph(overrides?: CallOverrides): Promise<string>;

    getRegistry(overrides?: CallOverrides): Promise<string>;

    setHolograph(
      holograph: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRegistry(
      registry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BridgeableContractDeployed(address,bytes32)"(
      contractAddress?: PromiseOrValue<string> | null,
      hash?: PromiseOrValue<BytesLike> | null
    ): BridgeableContractDeployedEventFilter;
    BridgeableContractDeployed(
      contractAddress?: PromiseOrValue<string> | null,
      hash?: PromiseOrValue<BytesLike> | null
    ): BridgeableContractDeployedEventFilter;
  };

  estimateGas: {
    deployHolographableContract(
      config: DeploymentConfigStruct,
      signature: VerificationStruct,
      signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getHolograph(overrides?: CallOverrides): Promise<BigNumber>;

    getRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    setHolograph(
      holograph: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRegistry(
      registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deployHolographableContract(
      config: DeploymentConfigStruct,
      signature: VerificationStruct,
      signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getHolograph(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setHolograph(
      holograph: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRegistry(
      registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
