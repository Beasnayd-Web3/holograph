/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface HolographInterfacesInterfaceInterface extends utils.Interface {
  functions: {
    "contractURI(string,string,string,uint16,address)": FunctionFragment;
    "getChainId(uint8,uint256,uint8)": FunctionFragment;
    "getUriPrepend(uint8)": FunctionFragment;
    "supportsInterface(uint8,bytes4)": FunctionFragment;
    "updateChainIdMap(uint8,uint256,uint8,uint256)": FunctionFragment;
    "updateChainIdMaps(uint8[],uint256[],uint8[],uint256[])": FunctionFragment;
    "updateInterface(uint8,bytes4,bool)": FunctionFragment;
    "updateInterfaces(uint8,bytes4[],bool)": FunctionFragment;
    "updateUriPrepend(uint8,string)": FunctionFragment;
    "updateUriPrepends(uint8[],string[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "contractURI"
      | "getChainId"
      | "getUriPrepend"
      | "supportsInterface"
      | "updateChainIdMap"
      | "updateChainIdMaps"
      | "updateInterface"
      | "updateInterfaces"
      | "updateUriPrepend"
      | "updateUriPrepends"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "contractURI",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getUriPrepend",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateChainIdMap",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateChainIdMaps",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateInterface",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateInterfaces",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUriPrepend",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUriPrepends",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<string>[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUriPrepend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateChainIdMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateChainIdMaps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateInterfaces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUriPrepend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUriPrepends",
    data: BytesLike
  ): Result;

  events: {};
}

export interface HolographInterfacesInterface extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HolographInterfacesInterfaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    contractURI(
      name: PromiseOrValue<string>,
      imageURL: PromiseOrValue<string>,
      externalLink: PromiseOrValue<string>,
      bps: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getChainId(
      fromChainType: PromiseOrValue<BigNumberish>,
      fromChainId: PromiseOrValue<BigNumberish>,
      toChainType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { toChainId: BigNumber }>;

    getUriPrepend(
      uriType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { prepend: string }>;

    supportsInterface(
      interfaceType: PromiseOrValue<BigNumberish>,
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    updateChainIdMap(
      fromChainType: PromiseOrValue<BigNumberish>,
      fromChainId: PromiseOrValue<BigNumberish>,
      toChainType: PromiseOrValue<BigNumberish>,
      toChainId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateChainIdMaps(
      fromChainType: PromiseOrValue<BigNumberish>[],
      fromChainId: PromiseOrValue<BigNumberish>[],
      toChainType: PromiseOrValue<BigNumberish>[],
      toChainId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateInterface(
      interfaceType: PromiseOrValue<BigNumberish>,
      interfaceId: PromiseOrValue<BytesLike>,
      supported: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateInterfaces(
      interfaceType: PromiseOrValue<BigNumberish>,
      interfaceIds: PromiseOrValue<BytesLike>[],
      supported: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateUriPrepend(
      uriType: PromiseOrValue<BigNumberish>,
      prepend: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateUriPrepends(
      uriTypes: PromiseOrValue<BigNumberish>[],
      prepends: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  contractURI(
    name: PromiseOrValue<string>,
    imageURL: PromiseOrValue<string>,
    externalLink: PromiseOrValue<string>,
    bps: PromiseOrValue<BigNumberish>,
    contractAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getChainId(
    fromChainType: PromiseOrValue<BigNumberish>,
    fromChainId: PromiseOrValue<BigNumberish>,
    toChainType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUriPrepend(
    uriType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  supportsInterface(
    interfaceType: PromiseOrValue<BigNumberish>,
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updateChainIdMap(
    fromChainType: PromiseOrValue<BigNumberish>,
    fromChainId: PromiseOrValue<BigNumberish>,
    toChainType: PromiseOrValue<BigNumberish>,
    toChainId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateChainIdMaps(
    fromChainType: PromiseOrValue<BigNumberish>[],
    fromChainId: PromiseOrValue<BigNumberish>[],
    toChainType: PromiseOrValue<BigNumberish>[],
    toChainId: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateInterface(
    interfaceType: PromiseOrValue<BigNumberish>,
    interfaceId: PromiseOrValue<BytesLike>,
    supported: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateInterfaces(
    interfaceType: PromiseOrValue<BigNumberish>,
    interfaceIds: PromiseOrValue<BytesLike>[],
    supported: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateUriPrepend(
    uriType: PromiseOrValue<BigNumberish>,
    prepend: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateUriPrepends(
    uriTypes: PromiseOrValue<BigNumberish>[],
    prepends: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    contractURI(
      name: PromiseOrValue<string>,
      imageURL: PromiseOrValue<string>,
      externalLink: PromiseOrValue<string>,
      bps: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getChainId(
      fromChainType: PromiseOrValue<BigNumberish>,
      fromChainId: PromiseOrValue<BigNumberish>,
      toChainType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUriPrepend(
      uriType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    supportsInterface(
      interfaceType: PromiseOrValue<BigNumberish>,
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateChainIdMap(
      fromChainType: PromiseOrValue<BigNumberish>,
      fromChainId: PromiseOrValue<BigNumberish>,
      toChainType: PromiseOrValue<BigNumberish>,
      toChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateChainIdMaps(
      fromChainType: PromiseOrValue<BigNumberish>[],
      fromChainId: PromiseOrValue<BigNumberish>[],
      toChainType: PromiseOrValue<BigNumberish>[],
      toChainId: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateInterface(
      interfaceType: PromiseOrValue<BigNumberish>,
      interfaceId: PromiseOrValue<BytesLike>,
      supported: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateInterfaces(
      interfaceType: PromiseOrValue<BigNumberish>,
      interfaceIds: PromiseOrValue<BytesLike>[],
      supported: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateUriPrepend(
      uriType: PromiseOrValue<BigNumberish>,
      prepend: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateUriPrepends(
      uriTypes: PromiseOrValue<BigNumberish>[],
      prepends: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    contractURI(
      name: PromiseOrValue<string>,
      imageURL: PromiseOrValue<string>,
      externalLink: PromiseOrValue<string>,
      bps: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainId(
      fromChainType: PromiseOrValue<BigNumberish>,
      fromChainId: PromiseOrValue<BigNumberish>,
      toChainType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUriPrepend(
      uriType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceType: PromiseOrValue<BigNumberish>,
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateChainIdMap(
      fromChainType: PromiseOrValue<BigNumberish>,
      fromChainId: PromiseOrValue<BigNumberish>,
      toChainType: PromiseOrValue<BigNumberish>,
      toChainId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateChainIdMaps(
      fromChainType: PromiseOrValue<BigNumberish>[],
      fromChainId: PromiseOrValue<BigNumberish>[],
      toChainType: PromiseOrValue<BigNumberish>[],
      toChainId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateInterface(
      interfaceType: PromiseOrValue<BigNumberish>,
      interfaceId: PromiseOrValue<BytesLike>,
      supported: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateInterfaces(
      interfaceType: PromiseOrValue<BigNumberish>,
      interfaceIds: PromiseOrValue<BytesLike>[],
      supported: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateUriPrepend(
      uriType: PromiseOrValue<BigNumberish>,
      prepend: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateUriPrepends(
      uriTypes: PromiseOrValue<BigNumberish>[],
      prepends: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    contractURI(
      name: PromiseOrValue<string>,
      imageURL: PromiseOrValue<string>,
      externalLink: PromiseOrValue<string>,
      bps: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainId(
      fromChainType: PromiseOrValue<BigNumberish>,
      fromChainId: PromiseOrValue<BigNumberish>,
      toChainType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUriPrepend(
      uriType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceType: PromiseOrValue<BigNumberish>,
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateChainIdMap(
      fromChainType: PromiseOrValue<BigNumberish>,
      fromChainId: PromiseOrValue<BigNumberish>,
      toChainType: PromiseOrValue<BigNumberish>,
      toChainId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateChainIdMaps(
      fromChainType: PromiseOrValue<BigNumberish>[],
      fromChainId: PromiseOrValue<BigNumberish>[],
      toChainType: PromiseOrValue<BigNumberish>[],
      toChainId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateInterface(
      interfaceType: PromiseOrValue<BigNumberish>,
      interfaceId: PromiseOrValue<BytesLike>,
      supported: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateInterfaces(
      interfaceType: PromiseOrValue<BigNumberish>,
      interfaceIds: PromiseOrValue<BytesLike>[],
      supported: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateUriPrepend(
      uriType: PromiseOrValue<BigNumberish>,
      prepend: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateUriPrepends(
      uriTypes: PromiseOrValue<BigNumberish>[],
      prepends: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
