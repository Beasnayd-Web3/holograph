/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface MockHolographGenesisChildInterface extends utils.Interface {
  functions: {
    "approveDeployer(address,bool)": FunctionFragment;
    "approveDeployerMock(address,bool)": FunctionFragment;
    "deploy(uint256,bytes12,bytes,bytes)": FunctionFragment;
    "isApprovedDeployer(address)": FunctionFragment;
    "isApprovedDeployerMock(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approveDeployer"
      | "approveDeployerMock"
      | "deploy"
      | "isApprovedDeployer"
      | "isApprovedDeployerMock"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approveDeployer",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "approveDeployerMock",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "deploy",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedDeployer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedDeployerMock",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveDeployerMock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedDeployerMock",
    data: BytesLike
  ): Result;

  events: {
    "Message(string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Message"): EventFragment;
}

export interface MessageEventObject {
  message: string;
}
export type MessageEvent = TypedEvent<[string], MessageEventObject>;

export type MessageEventFilter = TypedEventFilter<MessageEvent>;

export interface MockHolographGenesisChild extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockHolographGenesisChildInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approveDeployer(
      newDeployer: PromiseOrValue<string>,
      approve: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveDeployerMock(
      newDeployer: PromiseOrValue<string>,
      approve: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deploy(
      chainId: PromiseOrValue<BigNumberish>,
      saltHash: PromiseOrValue<BytesLike>,
      sourceCode: PromiseOrValue<BytesLike>,
      initCode: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isApprovedDeployer(
      deployer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isApprovedDeployerMock(
      deployer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  approveDeployer(
    newDeployer: PromiseOrValue<string>,
    approve: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveDeployerMock(
    newDeployer: PromiseOrValue<string>,
    approve: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deploy(
    chainId: PromiseOrValue<BigNumberish>,
    saltHash: PromiseOrValue<BytesLike>,
    sourceCode: PromiseOrValue<BytesLike>,
    initCode: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isApprovedDeployer(
    deployer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isApprovedDeployerMock(
    deployer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    approveDeployer(
      newDeployer: PromiseOrValue<string>,
      approve: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    approveDeployerMock(
      newDeployer: PromiseOrValue<string>,
      approve: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    deploy(
      chainId: PromiseOrValue<BigNumberish>,
      saltHash: PromiseOrValue<BytesLike>,
      sourceCode: PromiseOrValue<BytesLike>,
      initCode: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedDeployer(
      deployer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isApprovedDeployerMock(
      deployer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Message(string)"(message?: null): MessageEventFilter;
    Message(message?: null): MessageEventFilter;
  };

  estimateGas: {
    approveDeployer(
      newDeployer: PromiseOrValue<string>,
      approve: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveDeployerMock(
      newDeployer: PromiseOrValue<string>,
      approve: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deploy(
      chainId: PromiseOrValue<BigNumberish>,
      saltHash: PromiseOrValue<BytesLike>,
      sourceCode: PromiseOrValue<BytesLike>,
      initCode: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isApprovedDeployer(
      deployer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedDeployerMock(
      deployer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveDeployer(
      newDeployer: PromiseOrValue<string>,
      approve: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveDeployerMock(
      newDeployer: PromiseOrValue<string>,
      approve: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deploy(
      chainId: PromiseOrValue<BigNumberish>,
      saltHash: PromiseOrValue<BytesLike>,
      sourceCode: PromiseOrValue<BytesLike>,
      initCode: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedDeployer(
      deployer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedDeployerMock(
      deployer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
