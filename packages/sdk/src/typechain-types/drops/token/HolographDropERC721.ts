/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type AddressMintDetailsStruct = {
  totalMints: PromiseOrValue<BigNumberish>;
  presaleMints: PromiseOrValue<BigNumberish>;
  publicMints: PromiseOrValue<BigNumberish>;
};

export type AddressMintDetailsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber
] & { totalMints: BigNumber; presaleMints: BigNumber; publicMints: BigNumber };

export type SaleDetailsStruct = {
  publicSaleActive: PromiseOrValue<boolean>;
  presaleActive: PromiseOrValue<boolean>;
  publicSalePrice: PromiseOrValue<BigNumberish>;
  publicSaleStart: PromiseOrValue<BigNumberish>;
  publicSaleEnd: PromiseOrValue<BigNumberish>;
  presaleStart: PromiseOrValue<BigNumberish>;
  presaleEnd: PromiseOrValue<BigNumberish>;
  presaleMerkleRoot: PromiseOrValue<BytesLike>;
  maxSalePurchasePerAddress: PromiseOrValue<BigNumberish>;
  totalMinted: PromiseOrValue<BigNumberish>;
  maxSupply: PromiseOrValue<BigNumberish>;
};

export type SaleDetailsStructOutput = [
  boolean,
  boolean,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  publicSaleActive: boolean;
  presaleActive: boolean;
  publicSalePrice: BigNumber;
  publicSaleStart: BigNumber;
  publicSaleEnd: BigNumber;
  presaleStart: BigNumber;
  presaleEnd: BigNumber;
  presaleMerkleRoot: string;
  maxSalePurchasePerAddress: BigNumber;
  totalMinted: BigNumber;
  maxSupply: BigNumber;
};

export interface HolographDropERC721Interface extends utils.Interface {
  functions: {
    "adminMint(address,uint256)": FunctionFragment;
    "adminMintAirdrop(address[])": FunctionFragment;
    "beforeSafeTransfer(address,address,uint256,bytes)": FunctionFragment;
    "beforeTransfer(address,address,uint256,bytes)": FunctionFragment;
    "config()": FunctionFragment;
    "contractURI()": FunctionFragment;
    "dropsPriceOracle()": FunctionFragment;
    "erc721TransferHelper()": FunctionFragment;
    "finalizeOpenEdition()": FunctionFragment;
    "getNativePrice()": FunctionFragment;
    "init(bytes)": FunctionFragment;
    "isAdmin(address)": FunctionFragment;
    "isOwner(address)": FunctionFragment;
    "isOwner()": FunctionFragment;
    "manageMarketFilterSubscription(bool)": FunctionFragment;
    "marketFilterAddress()": FunctionFragment;
    "metadataRenderer()": FunctionFragment;
    "mintedPerAddress(address)": FunctionFragment;
    "modifyMarketFilterAddress(address)": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "name()": FunctionFragment;
    "onIsApprovedForAll(address,address)": FunctionFragment;
    "openseaOperatorFilterRegistry()": FunctionFragment;
    "owner()": FunctionFragment;
    "presaleMintsByAddress(address)": FunctionFragment;
    "purchase(uint256)": FunctionFragment;
    "purchasePresale(uint256,uint256,uint256,bytes32[])": FunctionFragment;
    "saleDetails()": FunctionFragment;
    "salesConfig()": FunctionFragment;
    "setFundsRecipient(address)": FunctionFragment;
    "setMetadataRenderer(address,bytes)": FunctionFragment;
    "setSaleConfiguration(uint104,uint32,uint64,uint64,uint64,uint64,bytes32)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalMintsByAddress(address)": FunctionFragment;
    "updateMarketFilterSettings(bytes)": FunctionFragment;
    "version()": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "adminMint"
      | "adminMintAirdrop"
      | "beforeSafeTransfer"
      | "beforeTransfer"
      | "config"
      | "contractURI"
      | "dropsPriceOracle"
      | "erc721TransferHelper"
      | "finalizeOpenEdition"
      | "getNativePrice"
      | "init"
      | "isAdmin"
      | "isOwner(address)"
      | "isOwner()"
      | "manageMarketFilterSubscription"
      | "marketFilterAddress"
      | "metadataRenderer"
      | "mintedPerAddress"
      | "modifyMarketFilterAddress"
      | "multicall"
      | "name"
      | "onIsApprovedForAll"
      | "openseaOperatorFilterRegistry"
      | "owner"
      | "presaleMintsByAddress"
      | "purchase"
      | "purchasePresale"
      | "saleDetails"
      | "salesConfig"
      | "setFundsRecipient"
      | "setMetadataRenderer"
      | "setSaleConfiguration"
      | "supportsInterface"
      | "tokenURI"
      | "totalMintsByAddress"
      | "updateMarketFilterSettings"
      | "version"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "adminMint",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "adminMintAirdrop",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeSafeTransfer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeTransfer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "config", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dropsPriceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "erc721TransferHelper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeOpenEdition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNativePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOwner(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "isOwner()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "manageMarketFilterSubscription",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "marketFilterAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "metadataRenderer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintedPerAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyMarketFilterAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onIsApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "openseaOperatorFilterRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "presaleMintsByAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "purchase",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "purchasePresale",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "saleDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "salesConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFundsRecipient",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetadataRenderer",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSaleConfiguration",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalMintsByAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMarketFilterSettings",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "adminMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adminMintAirdrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeSafeTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dropsPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc721TransferHelper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeOpenEdition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNativePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isOwner(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "manageMarketFilterSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketFilterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metadataRenderer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintedPerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyMarketFilterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onIsApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openseaOperatorFilterRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "presaleMintsByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "purchase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchasePresale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "saleDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "salesConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFundsRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMetadataRenderer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSaleConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalMintsByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMarketFilterSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "FundsReceived(address,uint256)": EventFragment;
    "FundsRecipientChanged(address,address)": EventFragment;
    "FundsWithdrawn(address,address,uint256,address,uint256)": EventFragment;
    "MintFeePayout(uint256,address,bool)": EventFragment;
    "OpenMintFinalized(address,uint256)": EventFragment;
    "Sale(address,uint256,uint256,uint256)": EventFragment;
    "SalesConfigChanged(address)": EventFragment;
    "UpdatedMetadataRenderer(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FundsReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsRecipientChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintFeePayout"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenMintFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sale"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SalesConfigChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedMetadataRenderer"): EventFragment;
}

export interface FundsReceivedEventObject {
  source: string;
  amount: BigNumber;
}
export type FundsReceivedEvent = TypedEvent<
  [string, BigNumber],
  FundsReceivedEventObject
>;

export type FundsReceivedEventFilter = TypedEventFilter<FundsReceivedEvent>;

export interface FundsRecipientChangedEventObject {
  newAddress: string;
  changedBy: string;
}
export type FundsRecipientChangedEvent = TypedEvent<
  [string, string],
  FundsRecipientChangedEventObject
>;

export type FundsRecipientChangedEventFilter =
  TypedEventFilter<FundsRecipientChangedEvent>;

export interface FundsWithdrawnEventObject {
  withdrawnBy: string;
  withdrawnTo: string;
  amount: BigNumber;
  feeRecipient: string;
  feeAmount: BigNumber;
}
export type FundsWithdrawnEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber],
  FundsWithdrawnEventObject
>;

export type FundsWithdrawnEventFilter = TypedEventFilter<FundsWithdrawnEvent>;

export interface MintFeePayoutEventObject {
  mintFeeAmount: BigNumber;
  mintFeeRecipient: string;
  success: boolean;
}
export type MintFeePayoutEvent = TypedEvent<
  [BigNumber, string, boolean],
  MintFeePayoutEventObject
>;

export type MintFeePayoutEventFilter = TypedEventFilter<MintFeePayoutEvent>;

export interface OpenMintFinalizedEventObject {
  sender: string;
  numberOfMints: BigNumber;
}
export type OpenMintFinalizedEvent = TypedEvent<
  [string, BigNumber],
  OpenMintFinalizedEventObject
>;

export type OpenMintFinalizedEventFilter =
  TypedEventFilter<OpenMintFinalizedEvent>;

export interface SaleEventObject {
  to: string;
  quantity: BigNumber;
  pricePerToken: BigNumber;
  firstPurchasedTokenId: BigNumber;
}
export type SaleEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  SaleEventObject
>;

export type SaleEventFilter = TypedEventFilter<SaleEvent>;

export interface SalesConfigChangedEventObject {
  changedBy: string;
}
export type SalesConfigChangedEvent = TypedEvent<
  [string],
  SalesConfigChangedEventObject
>;

export type SalesConfigChangedEventFilter =
  TypedEventFilter<SalesConfigChangedEvent>;

export interface UpdatedMetadataRendererEventObject {
  sender: string;
  renderer: string;
}
export type UpdatedMetadataRendererEvent = TypedEvent<
  [string, string],
  UpdatedMetadataRendererEventObject
>;

export type UpdatedMetadataRendererEventFilter =
  TypedEventFilter<UpdatedMetadataRendererEvent>;

export interface HolographDropERC721 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HolographDropERC721Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    adminMint(
      recipient: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    adminMintAirdrop(
      recipients: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    beforeSafeTransfer(
      _from: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    beforeTransfer(
      _from: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    config(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number, string] & {
        metadataRenderer: string;
        editionSize: BigNumber;
        royaltyBPS: number;
        fundsRecipient: string;
      }
    >;

    contractURI(overrides?: CallOverrides): Promise<[string]>;

    dropsPriceOracle(overrides?: CallOverrides): Promise<[string]>;

    erc721TransferHelper(overrides?: CallOverrides): Promise<[string]>;

    finalizeOpenEdition(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getNativePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    init(
      initPayload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isAdmin(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isOwner(address)"(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isOwner()"(overrides?: CallOverrides): Promise<[boolean]>;

    manageMarketFilterSubscription(
      enable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    marketFilterAddress(overrides?: CallOverrides): Promise<[string]>;

    metadataRenderer(overrides?: CallOverrides): Promise<[string]>;

    mintedPerAddress(
      minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[AddressMintDetailsStructOutput]>;

    modifyMarketFilterAddress(
      newMarketFilterAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    onIsApprovedForAll(
      arg0: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { approved: boolean }>;

    openseaOperatorFilterRegistry(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    presaleMintsByAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    purchase(
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    purchasePresale(
      quantity: PromiseOrValue<BigNumberish>,
      maxQuantity: PromiseOrValue<BigNumberish>,
      pricePerToken: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    saleDetails(overrides?: CallOverrides): Promise<[SaleDetailsStructOutput]>;

    salesConfig(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        publicSalePrice: BigNumber;
        maxSalePurchasePerAddress: number;
        publicSaleStart: BigNumber;
        publicSaleEnd: BigNumber;
        presaleStart: BigNumber;
        presaleEnd: BigNumber;
        presaleMerkleRoot: string;
      }
    >;

    setFundsRecipient(
      newRecipientAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMetadataRenderer(
      newRenderer: PromiseOrValue<string>,
      setupRenderer: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSaleConfiguration(
      publicSalePrice: PromiseOrValue<BigNumberish>,
      maxSalePurchasePerAddress: PromiseOrValue<BigNumberish>,
      publicSaleStart: PromiseOrValue<BigNumberish>,
      publicSaleEnd: PromiseOrValue<BigNumberish>,
      presaleStart: PromiseOrValue<BigNumberish>,
      presaleEnd: PromiseOrValue<BigNumberish>,
      presaleMerkleRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalMintsByAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    updateMarketFilterSettings(
      args: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  adminMint(
    recipient: PromiseOrValue<string>,
    quantity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  adminMintAirdrop(
    recipients: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  beforeSafeTransfer(
    _from: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  beforeTransfer(
    _from: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  config(
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, number, string] & {
      metadataRenderer: string;
      editionSize: BigNumber;
      royaltyBPS: number;
      fundsRecipient: string;
    }
  >;

  contractURI(overrides?: CallOverrides): Promise<string>;

  dropsPriceOracle(overrides?: CallOverrides): Promise<string>;

  erc721TransferHelper(overrides?: CallOverrides): Promise<string>;

  finalizeOpenEdition(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getNativePrice(overrides?: CallOverrides): Promise<BigNumber>;

  init(
    initPayload: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isAdmin(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isOwner(address)"(
    wallet: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

  manageMarketFilterSubscription(
    enable: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  marketFilterAddress(overrides?: CallOverrides): Promise<string>;

  metadataRenderer(overrides?: CallOverrides): Promise<string>;

  mintedPerAddress(
    minter: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<AddressMintDetailsStructOutput>;

  modifyMarketFilterAddress(
    newMarketFilterAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  multicall(
    data: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  onIsApprovedForAll(
    arg0: PromiseOrValue<string>,
    _operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  openseaOperatorFilterRegistry(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  presaleMintsByAddress(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  purchase(
    quantity: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  purchasePresale(
    quantity: PromiseOrValue<BigNumberish>,
    maxQuantity: PromiseOrValue<BigNumberish>,
    pricePerToken: PromiseOrValue<BigNumberish>,
    merkleProof: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  saleDetails(overrides?: CallOverrides): Promise<SaleDetailsStructOutput>;

  salesConfig(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
      publicSalePrice: BigNumber;
      maxSalePurchasePerAddress: number;
      publicSaleStart: BigNumber;
      publicSaleEnd: BigNumber;
      presaleStart: BigNumber;
      presaleEnd: BigNumber;
      presaleMerkleRoot: string;
    }
  >;

  setFundsRecipient(
    newRecipientAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMetadataRenderer(
    newRenderer: PromiseOrValue<string>,
    setupRenderer: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSaleConfiguration(
    publicSalePrice: PromiseOrValue<BigNumberish>,
    maxSalePurchasePerAddress: PromiseOrValue<BigNumberish>,
    publicSaleStart: PromiseOrValue<BigNumberish>,
    publicSaleEnd: PromiseOrValue<BigNumberish>,
    presaleStart: PromiseOrValue<BigNumberish>,
    presaleEnd: PromiseOrValue<BigNumberish>,
    presaleMerkleRoot: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokenURI(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  totalMintsByAddress(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  updateMarketFilterSettings(
    args: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<string>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    adminMint(
      recipient: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    adminMintAirdrop(
      recipients: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beforeSafeTransfer(
      _from: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    beforeTransfer(
      _from: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    config(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number, string] & {
        metadataRenderer: string;
        editionSize: BigNumber;
        royaltyBPS: number;
        fundsRecipient: string;
      }
    >;

    contractURI(overrides?: CallOverrides): Promise<string>;

    dropsPriceOracle(overrides?: CallOverrides): Promise<string>;

    erc721TransferHelper(overrides?: CallOverrides): Promise<string>;

    finalizeOpenEdition(overrides?: CallOverrides): Promise<void>;

    getNativePrice(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      initPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    isAdmin(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isOwner(address)"(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

    manageMarketFilterSubscription(
      enable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    marketFilterAddress(overrides?: CallOverrides): Promise<string>;

    metadataRenderer(overrides?: CallOverrides): Promise<string>;

    mintedPerAddress(
      minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<AddressMintDetailsStructOutput>;

    modifyMarketFilterAddress(
      newMarketFilterAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    name(overrides?: CallOverrides): Promise<string>;

    onIsApprovedForAll(
      arg0: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    openseaOperatorFilterRegistry(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    presaleMintsByAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    purchase(
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    purchasePresale(
      quantity: PromiseOrValue<BigNumberish>,
      maxQuantity: PromiseOrValue<BigNumberish>,
      pricePerToken: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    saleDetails(overrides?: CallOverrides): Promise<SaleDetailsStructOutput>;

    salesConfig(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        publicSalePrice: BigNumber;
        maxSalePurchasePerAddress: number;
        publicSaleStart: BigNumber;
        publicSaleEnd: BigNumber;
        presaleStart: BigNumber;
        presaleEnd: BigNumber;
        presaleMerkleRoot: string;
      }
    >;

    setFundsRecipient(
      newRecipientAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMetadataRenderer(
      newRenderer: PromiseOrValue<string>,
      setupRenderer: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSaleConfiguration(
      publicSalePrice: PromiseOrValue<BigNumberish>,
      maxSalePurchasePerAddress: PromiseOrValue<BigNumberish>,
      publicSaleStart: PromiseOrValue<BigNumberish>,
      publicSaleEnd: PromiseOrValue<BigNumberish>,
      presaleStart: PromiseOrValue<BigNumberish>,
      presaleEnd: PromiseOrValue<BigNumberish>,
      presaleMerkleRoot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    totalMintsByAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateMarketFilterSettings(
      args: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<string>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "FundsReceived(address,uint256)"(
      source?: PromiseOrValue<string> | null,
      amount?: null
    ): FundsReceivedEventFilter;
    FundsReceived(
      source?: PromiseOrValue<string> | null,
      amount?: null
    ): FundsReceivedEventFilter;

    "FundsRecipientChanged(address,address)"(
      newAddress?: PromiseOrValue<string> | null,
      changedBy?: PromiseOrValue<string> | null
    ): FundsRecipientChangedEventFilter;
    FundsRecipientChanged(
      newAddress?: PromiseOrValue<string> | null,
      changedBy?: PromiseOrValue<string> | null
    ): FundsRecipientChangedEventFilter;

    "FundsWithdrawn(address,address,uint256,address,uint256)"(
      withdrawnBy?: PromiseOrValue<string> | null,
      withdrawnTo?: PromiseOrValue<string> | null,
      amount?: null,
      feeRecipient?: null,
      feeAmount?: null
    ): FundsWithdrawnEventFilter;
    FundsWithdrawn(
      withdrawnBy?: PromiseOrValue<string> | null,
      withdrawnTo?: PromiseOrValue<string> | null,
      amount?: null,
      feeRecipient?: null,
      feeAmount?: null
    ): FundsWithdrawnEventFilter;

    "MintFeePayout(uint256,address,bool)"(
      mintFeeAmount?: null,
      mintFeeRecipient?: null,
      success?: null
    ): MintFeePayoutEventFilter;
    MintFeePayout(
      mintFeeAmount?: null,
      mintFeeRecipient?: null,
      success?: null
    ): MintFeePayoutEventFilter;

    "OpenMintFinalized(address,uint256)"(
      sender?: PromiseOrValue<string> | null,
      numberOfMints?: null
    ): OpenMintFinalizedEventFilter;
    OpenMintFinalized(
      sender?: PromiseOrValue<string> | null,
      numberOfMints?: null
    ): OpenMintFinalizedEventFilter;

    "Sale(address,uint256,uint256,uint256)"(
      to?: PromiseOrValue<string> | null,
      quantity?: PromiseOrValue<BigNumberish> | null,
      pricePerToken?: PromiseOrValue<BigNumberish> | null,
      firstPurchasedTokenId?: null
    ): SaleEventFilter;
    Sale(
      to?: PromiseOrValue<string> | null,
      quantity?: PromiseOrValue<BigNumberish> | null,
      pricePerToken?: PromiseOrValue<BigNumberish> | null,
      firstPurchasedTokenId?: null
    ): SaleEventFilter;

    "SalesConfigChanged(address)"(
      changedBy?: PromiseOrValue<string> | null
    ): SalesConfigChangedEventFilter;
    SalesConfigChanged(
      changedBy?: PromiseOrValue<string> | null
    ): SalesConfigChangedEventFilter;

    "UpdatedMetadataRenderer(address,address)"(
      sender?: null,
      renderer?: null
    ): UpdatedMetadataRendererEventFilter;
    UpdatedMetadataRenderer(
      sender?: null,
      renderer?: null
    ): UpdatedMetadataRendererEventFilter;
  };

  estimateGas: {
    adminMint(
      recipient: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    adminMintAirdrop(
      recipients: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    beforeSafeTransfer(
      _from: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beforeTransfer(
      _from: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    config(overrides?: CallOverrides): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<BigNumber>;

    dropsPriceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    erc721TransferHelper(overrides?: CallOverrides): Promise<BigNumber>;

    finalizeOpenEdition(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getNativePrice(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      initPayload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isAdmin(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isOwner(address)"(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    manageMarketFilterSubscription(
      enable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    marketFilterAddress(overrides?: CallOverrides): Promise<BigNumber>;

    metadataRenderer(overrides?: CallOverrides): Promise<BigNumber>;

    mintedPerAddress(
      minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    modifyMarketFilterAddress(
      newMarketFilterAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    onIsApprovedForAll(
      arg0: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openseaOperatorFilterRegistry(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    presaleMintsByAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    purchase(
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    purchasePresale(
      quantity: PromiseOrValue<BigNumberish>,
      maxQuantity: PromiseOrValue<BigNumberish>,
      pricePerToken: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    saleDetails(overrides?: CallOverrides): Promise<BigNumber>;

    salesConfig(overrides?: CallOverrides): Promise<BigNumber>;

    setFundsRecipient(
      newRecipientAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMetadataRenderer(
      newRenderer: PromiseOrValue<string>,
      setupRenderer: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSaleConfiguration(
      publicSalePrice: PromiseOrValue<BigNumberish>,
      maxSalePurchasePerAddress: PromiseOrValue<BigNumberish>,
      publicSaleStart: PromiseOrValue<BigNumberish>,
      publicSaleEnd: PromiseOrValue<BigNumberish>,
      presaleStart: PromiseOrValue<BigNumberish>,
      presaleEnd: PromiseOrValue<BigNumberish>,
      presaleMerkleRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalMintsByAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateMarketFilterSettings(
      args: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    adminMint(
      recipient: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    adminMintAirdrop(
      recipients: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    beforeSafeTransfer(
      _from: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beforeTransfer(
      _from: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    config(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dropsPriceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    erc721TransferHelper(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalizeOpenEdition(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getNativePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      initPayload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isAdmin(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isOwner(address)"(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    manageMarketFilterSubscription(
      enable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    marketFilterAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    metadataRenderer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintedPerAddress(
      minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    modifyMarketFilterAddress(
      newMarketFilterAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onIsApprovedForAll(
      arg0: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openseaOperatorFilterRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    presaleMintsByAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    purchase(
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    purchasePresale(
      quantity: PromiseOrValue<BigNumberish>,
      maxQuantity: PromiseOrValue<BigNumberish>,
      pricePerToken: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    saleDetails(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    salesConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFundsRecipient(
      newRecipientAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMetadataRenderer(
      newRenderer: PromiseOrValue<string>,
      setupRenderer: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSaleConfiguration(
      publicSalePrice: PromiseOrValue<BigNumberish>,
      maxSalePurchasePerAddress: PromiseOrValue<BigNumberish>,
      publicSaleStart: PromiseOrValue<BigNumberish>,
      publicSaleEnd: PromiseOrValue<BigNumberish>,
      presaleStart: PromiseOrValue<BigNumberish>,
      presaleEnd: PromiseOrValue<BigNumberish>,
      presaleMerkleRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalMintsByAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateMarketFilterSettings(
      args: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
