/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  MockERC721Receiver,
  MockERC721ReceiverInterface,
} from "../../mock/MockERC721Receiver";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceID",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "active",
        type: "bool",
      },
    ],
    name: "toggleWorks",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "transferNFT",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506000805460ff1916600117905561040a8061002d6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806301ffc9a714610051578063150b7a021461007957806392ed8e1c146100bd578063d2f0922a146100fe575b600080fd5b61006461005f36600461028c565b610111565b60405190151581526020015b60405180910390f35b61008c6100873660046102fa565b6101b9565b6040517fffffffff000000000000000000000000000000000000000000000000000000009091168152602001610070565b6100fc6100cb366004610399565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b005b6100fc61010c3660046103bb565b6101f9565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614806101a457507f150b7a02000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b156101b157506001919050565b506000919050565b6000805460ff16156101ec57507f150b7a02000000000000000000000000000000000000000000000000000000006101f0565b5060005b95945050505050565b6040517f42842e0e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8281166024830152604482018490528416906342842e0e90606401600060405180830381600087803b15801561026f57600080fd5b505af1158015610283573d6000803e3d6000fd5b50505050505050565b60006020828403121561029e57600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146102ce57600080fd5b9392505050565b73ffffffffffffffffffffffffffffffffffffffff811681146102f757600080fd5b50565b60008060008060006080868803121561031257600080fd5b853561031d816102d5565b9450602086013561032d816102d5565b935060408601359250606086013567ffffffffffffffff8082111561035157600080fd5b818801915088601f83011261036557600080fd5b81358181111561037457600080fd5b89602082850101111561038657600080fd5b9699959850939650602001949392505050565b6000602082840312156103ab57600080fd5b813580151581146102ce57600080fd5b6000806000606084860312156103d057600080fd5b83356103db816102d5565b92506020840135915060408401356103f2816102d5565b80915050925092509256fea164736f6c634300080d000a";

type MockERC721ReceiverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockERC721ReceiverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockERC721Receiver__factory extends ContractFactory {
  constructor(...args: MockERC721ReceiverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockERC721Receiver> {
    return super.deploy(overrides || {}) as Promise<MockERC721Receiver>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockERC721Receiver {
    return super.attach(address) as MockERC721Receiver;
  }
  override connect(signer: Signer): MockERC721Receiver__factory {
    return super.connect(signer) as MockERC721Receiver__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockERC721ReceiverInterface {
    return new utils.Interface(_abi) as MockERC721ReceiverInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockERC721Receiver {
    return new Contract(address, _abi, signerOrProvider) as MockERC721Receiver;
  }
}
