/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface HolographRegistryInterfaceInterface extends utils.Interface {
  functions: {
    "getContractTypeAddress(bytes32)": FunctionFragment;
    "getHToken(uint32)": FunctionFragment;
    "getHolograph()": FunctionFragment;
    "getHolographableContracts(uint256,uint256)": FunctionFragment;
    "getHolographableContractsLength()": FunctionFragment;
    "getHolographedHashAddress(bytes32)": FunctionFragment;
    "getReservedContractTypeAddress(bytes32)": FunctionFragment;
    "getUtilityToken()": FunctionFragment;
    "holographableEvent(bytes)": FunctionFragment;
    "isHolographedContract(address)": FunctionFragment;
    "isHolographedHashDeployed(bytes32)": FunctionFragment;
    "referenceContractTypeAddress(address)": FunctionFragment;
    "setContractTypeAddress(bytes32,address)": FunctionFragment;
    "setHToken(uint32,address)": FunctionFragment;
    "setHolograph(address)": FunctionFragment;
    "setHolographedHashAddress(bytes32,address)": FunctionFragment;
    "setReservedContractTypeAddress(bytes32,bool)": FunctionFragment;
    "setReservedContractTypeAddresses(bytes32[],bool[])": FunctionFragment;
    "setUtilityToken(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getContractTypeAddress"
      | "getHToken"
      | "getHolograph"
      | "getHolographableContracts"
      | "getHolographableContractsLength"
      | "getHolographedHashAddress"
      | "getReservedContractTypeAddress"
      | "getUtilityToken"
      | "holographableEvent"
      | "isHolographedContract"
      | "isHolographedHashDeployed"
      | "referenceContractTypeAddress"
      | "setContractTypeAddress"
      | "setHToken"
      | "setHolograph"
      | "setHolographedHashAddress"
      | "setReservedContractTypeAddress"
      | "setReservedContractTypeAddresses"
      | "setUtilityToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getContractTypeAddress",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getHToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getHolograph",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHolographableContracts",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getHolographableContractsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHolographedHashAddress",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReservedContractTypeAddress",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUtilityToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "holographableEvent",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isHolographedContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isHolographedHashDeployed",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "referenceContractTypeAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractTypeAddress",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setHToken",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setHolograph",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setHolographedHashAddress",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setReservedContractTypeAddress",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setReservedContractTypeAddresses",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<boolean>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setUtilityToken",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getContractTypeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getHolograph",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHolographableContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHolographableContractsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHolographedHashAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReservedContractTypeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUtilityToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "holographableEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isHolographedContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isHolographedHashDeployed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referenceContractTypeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractTypeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setHToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setHolograph",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHolographedHashAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReservedContractTypeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReservedContractTypeAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUtilityToken",
    data: BytesLike
  ): Result;

  events: {
    "HolographableContractEvent(address,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "HolographableContractEvent"): EventFragment;
}

export interface HolographableContractEventEventObject {
  _holographableContract: string;
  _payload: string;
}
export type HolographableContractEventEvent = TypedEvent<
  [string, string],
  HolographableContractEventEventObject
>;

export type HolographableContractEventEventFilter =
  TypedEventFilter<HolographableContractEventEvent>;

export interface HolographRegistryInterface extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HolographRegistryInterfaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getContractTypeAddress(
      contractType: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getHToken(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getHolograph(
      overrides?: CallOverrides
    ): Promise<[string] & { holograph: string }>;

    getHolographableContracts(
      index: PromiseOrValue<BigNumberish>,
      length: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { contracts: string[] }>;

    getHolographableContractsLength(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getHolographedHashAddress(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getReservedContractTypeAddress(
      contractType: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { contractTypeAddress: string }>;

    getUtilityToken(
      overrides?: CallOverrides
    ): Promise<[string] & { utilityToken: string }>;

    holographableEvent(
      payload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isHolographedContract(
      smartContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isHolographedHashDeployed(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    referenceContractTypeAddress(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setContractTypeAddress(
      contractType: PromiseOrValue<BytesLike>,
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setHToken(
      chainId: PromiseOrValue<BigNumberish>,
      hToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setHolograph(
      holograph: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setHolographedHashAddress(
      hash: PromiseOrValue<BytesLike>,
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReservedContractTypeAddress(
      hash: PromiseOrValue<BytesLike>,
      reserved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReservedContractTypeAddresses(
      hashes: PromiseOrValue<BytesLike>[],
      reserved: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUtilityToken(
      utilityToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getContractTypeAddress(
    contractType: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getHToken(
    chainId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getHolograph(overrides?: CallOverrides): Promise<string>;

  getHolographableContracts(
    index: PromiseOrValue<BigNumberish>,
    length: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getHolographableContractsLength(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getHolographedHashAddress(
    hash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getReservedContractTypeAddress(
    contractType: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getUtilityToken(overrides?: CallOverrides): Promise<string>;

  holographableEvent(
    payload: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isHolographedContract(
    smartContract: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isHolographedHashDeployed(
    hash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  referenceContractTypeAddress(
    contractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setContractTypeAddress(
    contractType: PromiseOrValue<BytesLike>,
    contractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setHToken(
    chainId: PromiseOrValue<BigNumberish>,
    hToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setHolograph(
    holograph: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setHolographedHashAddress(
    hash: PromiseOrValue<BytesLike>,
    contractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReservedContractTypeAddress(
    hash: PromiseOrValue<BytesLike>,
    reserved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReservedContractTypeAddresses(
    hashes: PromiseOrValue<BytesLike>[],
    reserved: PromiseOrValue<boolean>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUtilityToken(
    utilityToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getContractTypeAddress(
      contractType: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getHToken(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getHolograph(overrides?: CallOverrides): Promise<string>;

    getHolographableContracts(
      index: PromiseOrValue<BigNumberish>,
      length: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getHolographableContractsLength(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHolographedHashAddress(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getReservedContractTypeAddress(
      contractType: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getUtilityToken(overrides?: CallOverrides): Promise<string>;

    holographableEvent(
      payload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    isHolographedContract(
      smartContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isHolographedHashDeployed(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    referenceContractTypeAddress(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    setContractTypeAddress(
      contractType: PromiseOrValue<BytesLike>,
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setHToken(
      chainId: PromiseOrValue<BigNumberish>,
      hToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setHolograph(
      holograph: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setHolographedHashAddress(
      hash: PromiseOrValue<BytesLike>,
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setReservedContractTypeAddress(
      hash: PromiseOrValue<BytesLike>,
      reserved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setReservedContractTypeAddresses(
      hashes: PromiseOrValue<BytesLike>[],
      reserved: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setUtilityToken(
      utilityToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "HolographableContractEvent(address,bytes)"(
      _holographableContract?: PromiseOrValue<string> | null,
      _payload?: null
    ): HolographableContractEventEventFilter;
    HolographableContractEvent(
      _holographableContract?: PromiseOrValue<string> | null,
      _payload?: null
    ): HolographableContractEventEventFilter;
  };

  estimateGas: {
    getContractTypeAddress(
      contractType: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHToken(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHolograph(overrides?: CallOverrides): Promise<BigNumber>;

    getHolographableContracts(
      index: PromiseOrValue<BigNumberish>,
      length: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHolographableContractsLength(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHolographedHashAddress(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReservedContractTypeAddress(
      contractType: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUtilityToken(overrides?: CallOverrides): Promise<BigNumber>;

    holographableEvent(
      payload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isHolographedContract(
      smartContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isHolographedHashDeployed(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referenceContractTypeAddress(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setContractTypeAddress(
      contractType: PromiseOrValue<BytesLike>,
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setHToken(
      chainId: PromiseOrValue<BigNumberish>,
      hToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setHolograph(
      holograph: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setHolographedHashAddress(
      hash: PromiseOrValue<BytesLike>,
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReservedContractTypeAddress(
      hash: PromiseOrValue<BytesLike>,
      reserved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReservedContractTypeAddresses(
      hashes: PromiseOrValue<BytesLike>[],
      reserved: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUtilityToken(
      utilityToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getContractTypeAddress(
      contractType: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHToken(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHolograph(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getHolographableContracts(
      index: PromiseOrValue<BigNumberish>,
      length: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHolographableContractsLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHolographedHashAddress(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReservedContractTypeAddress(
      contractType: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUtilityToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    holographableEvent(
      payload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isHolographedContract(
      smartContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isHolographedHashDeployed(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referenceContractTypeAddress(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setContractTypeAddress(
      contractType: PromiseOrValue<BytesLike>,
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setHToken(
      chainId: PromiseOrValue<BigNumberish>,
      hToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setHolograph(
      holograph: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setHolographedHashAddress(
      hash: PromiseOrValue<BytesLike>,
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReservedContractTypeAddress(
      hash: PromiseOrValue<BytesLike>,
      reserved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReservedContractTypeAddresses(
      hashes: PromiseOrValue<BytesLike>[],
      reserved: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUtilityToken(
      utilityToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
