/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace LayerZeroOverrides {
  export type ApplicationConfigurationStruct = {
    inboundProofLibraryVersion: PromiseOrValue<BigNumberish>;
    inboundBlockConfirmations: PromiseOrValue<BigNumberish>;
    relayer: PromiseOrValue<string>;
    outboundProofType: PromiseOrValue<BigNumberish>;
    outboundBlockConfirmations: PromiseOrValue<BigNumberish>;
    oracle: PromiseOrValue<string>;
  };

  export type ApplicationConfigurationStructOutput = [
    number,
    BigNumber,
    string,
    number,
    BigNumber,
    string
  ] & {
    inboundProofLibraryVersion: number;
    inboundBlockConfirmations: BigNumber;
    relayer: string;
    outboundProofType: number;
    outboundBlockConfirmations: BigNumber;
    oracle: string;
  };
}

export interface LayerZeroOverridesInterface extends utils.Interface {
  functions: {
    "defaultAppConfig(uint16)": FunctionFragment;
    "defaultSendLibrary()": FunctionFragment;
    "dstConfigLookup(uint16,uint16)": FunctionFragment;
    "dstPriceLookup(uint16)": FunctionFragment;
    "estimateFees(uint16,address,bytes,bool,bytes)": FunctionFragment;
    "getAppConfig(uint16,address)": FunctionFragment;
    "send(uint16,bytes,bytes,address,address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "defaultAppConfig"
      | "defaultSendLibrary"
      | "dstConfigLookup"
      | "dstPriceLookup"
      | "estimateFees"
      | "getAppConfig"
      | "send"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "defaultAppConfig",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultSendLibrary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dstConfigLookup",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "dstPriceLookup",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateFees",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAppConfig",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "defaultAppConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultSendLibrary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dstConfigLookup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dstPriceLookup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAppConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;

  events: {};
}

export interface LayerZeroOverrides extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LayerZeroOverridesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    defaultAppConfig(
      destinationChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, string, number, BigNumber, string] & {
        inboundProofLibraryVersion: number;
        inboundBlockConfirmations: BigNumber;
        relayer: string;
        outboundProofType: number;
        outboundBlockConfirmations: BigNumber;
        oracle: string;
      }
    >;

    defaultSendLibrary(overrides?: CallOverrides): Promise<[string]>;

    dstConfigLookup(
      destinationChainId: PromiseOrValue<BigNumberish>,
      outboundProofType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        dstNativeAmtCap: BigNumber;
        baseGas: BigNumber;
        gasPerByte: BigNumber;
      }
    >;

    dstPriceLookup(
      destinationChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        dstPriceRatio: BigNumber;
        dstGasPriceInWei: BigNumber;
      }
    >;

    estimateFees(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _userApplication: PromiseOrValue<string>,
      _payload: PromiseOrValue<BytesLike>,
      _payInZRO: PromiseOrValue<boolean>,
      _adapterParam: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { nativeFee: BigNumber; zroFee: BigNumber }
    >;

    getAppConfig(
      destinationChainId: PromiseOrValue<BigNumberish>,
      userApplicationAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[LayerZeroOverrides.ApplicationConfigurationStructOutput]>;

    send(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<BytesLike>,
      _payload: PromiseOrValue<BytesLike>,
      _refundAddress: PromiseOrValue<string>,
      _zroPaymentAddress: PromiseOrValue<string>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  defaultAppConfig(
    destinationChainId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, string, number, BigNumber, string] & {
      inboundProofLibraryVersion: number;
      inboundBlockConfirmations: BigNumber;
      relayer: string;
      outboundProofType: number;
      outboundBlockConfirmations: BigNumber;
      oracle: string;
    }
  >;

  defaultSendLibrary(overrides?: CallOverrides): Promise<string>;

  dstConfigLookup(
    destinationChainId: PromiseOrValue<BigNumberish>,
    outboundProofType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      dstNativeAmtCap: BigNumber;
      baseGas: BigNumber;
      gasPerByte: BigNumber;
    }
  >;

  dstPriceLookup(
    destinationChainId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      dstPriceRatio: BigNumber;
      dstGasPriceInWei: BigNumber;
    }
  >;

  estimateFees(
    _dstChainId: PromiseOrValue<BigNumberish>,
    _userApplication: PromiseOrValue<string>,
    _payload: PromiseOrValue<BytesLike>,
    _payInZRO: PromiseOrValue<boolean>,
    _adapterParam: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { nativeFee: BigNumber; zroFee: BigNumber }
  >;

  getAppConfig(
    destinationChainId: PromiseOrValue<BigNumberish>,
    userApplicationAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<LayerZeroOverrides.ApplicationConfigurationStructOutput>;

  send(
    _dstChainId: PromiseOrValue<BigNumberish>,
    _destination: PromiseOrValue<BytesLike>,
    _payload: PromiseOrValue<BytesLike>,
    _refundAddress: PromiseOrValue<string>,
    _zroPaymentAddress: PromiseOrValue<string>,
    _adapterParams: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    defaultAppConfig(
      destinationChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, string, number, BigNumber, string] & {
        inboundProofLibraryVersion: number;
        inboundBlockConfirmations: BigNumber;
        relayer: string;
        outboundProofType: number;
        outboundBlockConfirmations: BigNumber;
        oracle: string;
      }
    >;

    defaultSendLibrary(overrides?: CallOverrides): Promise<string>;

    dstConfigLookup(
      destinationChainId: PromiseOrValue<BigNumberish>,
      outboundProofType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        dstNativeAmtCap: BigNumber;
        baseGas: BigNumber;
        gasPerByte: BigNumber;
      }
    >;

    dstPriceLookup(
      destinationChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        dstPriceRatio: BigNumber;
        dstGasPriceInWei: BigNumber;
      }
    >;

    estimateFees(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _userApplication: PromiseOrValue<string>,
      _payload: PromiseOrValue<BytesLike>,
      _payInZRO: PromiseOrValue<boolean>,
      _adapterParam: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { nativeFee: BigNumber; zroFee: BigNumber }
    >;

    getAppConfig(
      destinationChainId: PromiseOrValue<BigNumberish>,
      userApplicationAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<LayerZeroOverrides.ApplicationConfigurationStructOutput>;

    send(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<BytesLike>,
      _payload: PromiseOrValue<BytesLike>,
      _refundAddress: PromiseOrValue<string>,
      _zroPaymentAddress: PromiseOrValue<string>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    defaultAppConfig(
      destinationChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    defaultSendLibrary(overrides?: CallOverrides): Promise<BigNumber>;

    dstConfigLookup(
      destinationChainId: PromiseOrValue<BigNumberish>,
      outboundProofType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dstPriceLookup(
      destinationChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateFees(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _userApplication: PromiseOrValue<string>,
      _payload: PromiseOrValue<BytesLike>,
      _payInZRO: PromiseOrValue<boolean>,
      _adapterParam: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAppConfig(
      destinationChainId: PromiseOrValue<BigNumberish>,
      userApplicationAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    send(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<BytesLike>,
      _payload: PromiseOrValue<BytesLike>,
      _refundAddress: PromiseOrValue<string>,
      _zroPaymentAddress: PromiseOrValue<string>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    defaultAppConfig(
      destinationChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultSendLibrary(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dstConfigLookup(
      destinationChainId: PromiseOrValue<BigNumberish>,
      outboundProofType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dstPriceLookup(
      destinationChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimateFees(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _userApplication: PromiseOrValue<string>,
      _payload: PromiseOrValue<BytesLike>,
      _payInZRO: PromiseOrValue<boolean>,
      _adapterParam: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAppConfig(
      destinationChainId: PromiseOrValue<BigNumberish>,
      userApplicationAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    send(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<BytesLike>,
      _payload: PromiseOrValue<BytesLike>,
      _refundAddress: PromiseOrValue<string>,
      _zroPaymentAddress: PromiseOrValue<string>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
