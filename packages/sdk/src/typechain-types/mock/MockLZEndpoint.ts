/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace LayerZeroOverrides {
  export type ApplicationConfigurationStruct = {
    inboundProofLibraryVersion: PromiseOrValue<BigNumberish>;
    inboundBlockConfirmations: PromiseOrValue<BigNumberish>;
    relayer: PromiseOrValue<string>;
    outboundProofType: PromiseOrValue<BigNumberish>;
    outboundBlockConfirmations: PromiseOrValue<BigNumberish>;
    oracle: PromiseOrValue<string>;
  };

  export type ApplicationConfigurationStructOutput = [
    number,
    BigNumber,
    string,
    number,
    BigNumber,
    string
  ] & {
    inboundProofLibraryVersion: number;
    inboundBlockConfirmations: BigNumber;
    relayer: string;
    outboundProofType: number;
    outboundBlockConfirmations: BigNumber;
    oracle: string;
  };
}

export interface MockLZEndpointInterface extends utils.Interface {
  functions: {
    "admin()": FunctionFragment;
    "adminCall(address,bytes)": FunctionFragment;
    "crossChainMessage(address,uint256,bytes)": FunctionFragment;
    "defaultSendLibrary()": FunctionFragment;
    "dstConfigLookup(uint16,uint16)": FunctionFragment;
    "dstPriceLookup(uint16)": FunctionFragment;
    "estimateFees(uint16,address,bytes,bool,bytes)": FunctionFragment;
    "getAdmin()": FunctionFragment;
    "getAppConfig(uint16,address)": FunctionFragment;
    "send(uint16,bytes,bytes,address,address,bytes)": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "admin"
      | "adminCall"
      | "crossChainMessage"
      | "defaultSendLibrary"
      | "dstConfigLookup"
      | "dstPriceLookup"
      | "estimateFees"
      | "getAdmin"
      | "getAppConfig"
      | "send"
      | "setAdmin"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "adminCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "crossChainMessage",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultSendLibrary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dstConfigLookup",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "dstPriceLookup",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateFees",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "getAdmin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAppConfig",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "adminCall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "crossChainMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultSendLibrary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dstConfigLookup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dstPriceLookup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAppConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;

  events: {
    "LzEvent(uint16,bytes,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LzEvent"): EventFragment;
}

export interface LzEventEventObject {
  _dstChainId: number;
  _destination: string;
  _payload: string;
}
export type LzEventEvent = TypedEvent<
  [number, string, string],
  LzEventEventObject
>;

export type LzEventEventFilter = TypedEventFilter<LzEventEvent>;

export interface MockLZEndpoint extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockLZEndpointInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    admin(overrides?: CallOverrides): Promise<[string]>;

    adminCall(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    crossChainMessage(
      target: PromiseOrValue<string>,
      gasLimit: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    defaultSendLibrary(overrides?: CallOverrides): Promise<[string]>;

    dstConfigLookup(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        dstNativeAmtCap: BigNumber;
        baseGas: BigNumber;
        gasPerByte: BigNumber;
      }
    >;

    dstPriceLookup(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        dstPriceRatio: BigNumber;
        dstGasPriceInWei: BigNumber;
      }
    >;

    estimateFees(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<boolean>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { nativeFee: BigNumber; zroFee: BigNumber }
    >;

    getAdmin(
      overrides?: CallOverrides
    ): Promise<[string] & { adminAddress: string }>;

    getAppConfig(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[LayerZeroOverrides.ApplicationConfigurationStructOutput]>;

    send(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<BytesLike>,
      _payload: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<string>,
      arg4: PromiseOrValue<string>,
      arg5: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      adminAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  admin(overrides?: CallOverrides): Promise<string>;

  adminCall(
    target: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  crossChainMessage(
    target: PromiseOrValue<string>,
    gasLimit: PromiseOrValue<BigNumberish>,
    payload: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  defaultSendLibrary(overrides?: CallOverrides): Promise<string>;

  dstConfigLookup(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      dstNativeAmtCap: BigNumber;
      baseGas: BigNumber;
      gasPerByte: BigNumber;
    }
  >;

  dstPriceLookup(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      dstPriceRatio: BigNumber;
      dstGasPriceInWei: BigNumber;
    }
  >;

  estimateFees(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BytesLike>,
    arg3: PromiseOrValue<boolean>,
    arg4: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { nativeFee: BigNumber; zroFee: BigNumber }
  >;

  getAdmin(overrides?: CallOverrides): Promise<string>;

  getAppConfig(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<LayerZeroOverrides.ApplicationConfigurationStructOutput>;

  send(
    _dstChainId: PromiseOrValue<BigNumberish>,
    _destination: PromiseOrValue<BytesLike>,
    _payload: PromiseOrValue<BytesLike>,
    arg3: PromiseOrValue<string>,
    arg4: PromiseOrValue<string>,
    arg5: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    adminAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    adminCall(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    crossChainMessage(
      target: PromiseOrValue<string>,
      gasLimit: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    defaultSendLibrary(overrides?: CallOverrides): Promise<string>;

    dstConfigLookup(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        dstNativeAmtCap: BigNumber;
        baseGas: BigNumber;
        gasPerByte: BigNumber;
      }
    >;

    dstPriceLookup(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        dstPriceRatio: BigNumber;
        dstGasPriceInWei: BigNumber;
      }
    >;

    estimateFees(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<boolean>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { nativeFee: BigNumber; zroFee: BigNumber }
    >;

    getAdmin(overrides?: CallOverrides): Promise<string>;

    getAppConfig(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<LayerZeroOverrides.ApplicationConfigurationStructOutput>;

    send(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<BytesLike>,
      _payload: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<string>,
      arg4: PromiseOrValue<string>,
      arg5: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAdmin(
      adminAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LzEvent(uint16,bytes,bytes)"(
      _dstChainId?: null,
      _destination?: null,
      _payload?: null
    ): LzEventEventFilter;
    LzEvent(
      _dstChainId?: null,
      _destination?: null,
      _payload?: null
    ): LzEventEventFilter;
  };

  estimateGas: {
    admin(overrides?: CallOverrides): Promise<BigNumber>;

    adminCall(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    crossChainMessage(
      target: PromiseOrValue<string>,
      gasLimit: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    defaultSendLibrary(overrides?: CallOverrides): Promise<BigNumber>;

    dstConfigLookup(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dstPriceLookup(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateFees(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<boolean>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    getAppConfig(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    send(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<BytesLike>,
      _payload: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<string>,
      arg4: PromiseOrValue<string>,
      arg5: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAdmin(
      adminAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adminCall(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    crossChainMessage(
      target: PromiseOrValue<string>,
      gasLimit: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    defaultSendLibrary(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dstConfigLookup(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dstPriceLookup(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimateFees(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<boolean>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAppConfig(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    send(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<BytesLike>,
      _payload: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<string>,
      arg4: PromiseOrValue<string>,
      arg5: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      adminAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
