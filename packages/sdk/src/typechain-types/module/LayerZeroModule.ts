/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type GasParametersStruct = {
  msgBaseGas: PromiseOrValue<BigNumberish>;
  msgGasPerByte: PromiseOrValue<BigNumberish>;
  jobBaseGas: PromiseOrValue<BigNumberish>;
  jobGasPerByte: PromiseOrValue<BigNumberish>;
  minGasPrice: PromiseOrValue<BigNumberish>;
  maxGasLimit: PromiseOrValue<BigNumberish>;
};

export type GasParametersStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  msgBaseGas: BigNumber;
  msgGasPerByte: BigNumber;
  jobBaseGas: BigNumber;
  jobGasPerByte: BigNumber;
  minGasPrice: BigNumber;
  maxGasLimit: BigNumber;
};

export interface LayerZeroModuleInterface extends utils.Interface {
  functions: {
    "admin()": FunctionFragment;
    "adminCall(address,bytes)": FunctionFragment;
    "getAdmin()": FunctionFragment;
    "getBridge()": FunctionFragment;
    "getGasParameters(uint32)": FunctionFragment;
    "getHlgFee(uint32,uint256,uint256,bytes)": FunctionFragment;
    "getInterfaces()": FunctionFragment;
    "getLZEndpoint()": FunctionFragment;
    "getMessageFee(uint32,uint256,uint256,bytes)": FunctionFragment;
    "getOperator()": FunctionFragment;
    "getOptimismGasPriceOracle()": FunctionFragment;
    "init(bytes)": FunctionFragment;
    "lzReceive(uint16,bytes,uint64,bytes)": FunctionFragment;
    "send(uint256,uint256,uint32,address,uint256,bytes)": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setBridge(address)": FunctionFragment;
    "setGasParameters(uint32[],(uint256,uint256,uint256,uint256,uint256,uint256)[])": FunctionFragment;
    "setGasParameters(uint32,(uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "setInterfaces(address)": FunctionFragment;
    "setLZEndpoint(address)": FunctionFragment;
    "setOperator(address)": FunctionFragment;
    "setOptimismGasPriceOracle(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "admin"
      | "adminCall"
      | "getAdmin"
      | "getBridge"
      | "getGasParameters"
      | "getHlgFee"
      | "getInterfaces"
      | "getLZEndpoint"
      | "getMessageFee"
      | "getOperator"
      | "getOptimismGasPriceOracle"
      | "init"
      | "lzReceive"
      | "send"
      | "setAdmin"
      | "setBridge"
      | "setGasParameters(uint32[],(uint256,uint256,uint256,uint256,uint256,uint256)[])"
      | "setGasParameters(uint32,(uint256,uint256,uint256,uint256,uint256,uint256))"
      | "setInterfaces"
      | "setLZEndpoint"
      | "setOperator"
      | "setOptimismGasPriceOracle"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "adminCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "getAdmin", values?: undefined): string;
  encodeFunctionData(functionFragment: "getBridge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getGasParameters",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getHlgFee",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getInterfaces",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLZEndpoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMessageFee",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOperator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOptimismGasPriceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "lzReceive",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBridge",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGasParameters(uint32[],(uint256,uint256,uint256,uint256,uint256,uint256)[])",
    values: [PromiseOrValue<BigNumberish>[], GasParametersStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setGasParameters(uint32,(uint256,uint256,uint256,uint256,uint256,uint256))",
    values: [PromiseOrValue<BigNumberish>, GasParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterfaces",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLZEndpoint",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOptimismGasPriceOracle",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "adminCall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBridge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGasParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHlgFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInterfaces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLZEndpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMessageFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOptimismGasPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBridge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGasParameters(uint32[],(uint256,uint256,uint256,uint256,uint256,uint256)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGasParameters(uint32,(uint256,uint256,uint256,uint256,uint256,uint256))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterfaces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLZEndpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOptimismGasPriceOracle",
    data: BytesLike
  ): Result;

  events: {};
}

export interface LayerZeroModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LayerZeroModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    admin(overrides?: CallOverrides): Promise<[string]>;

    adminCall(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAdmin(
      overrides?: CallOverrides
    ): Promise<[string] & { adminAddress: string }>;

    getBridge(
      overrides?: CallOverrides
    ): Promise<[string] & { bridge: string }>;

    getGasParameters(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [GasParametersStructOutput] & { gasParameters: GasParametersStructOutput }
    >;

    getHlgFee(
      toChain: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      crossChainPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { hlgFee: BigNumber }>;

    getInterfaces(
      overrides?: CallOverrides
    ): Promise<[string] & { interfaces: string }>;

    getLZEndpoint(
      overrides?: CallOverrides
    ): Promise<[string] & { lZEndpoint: string }>;

    getMessageFee(
      toChain: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      crossChainPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        hlgFee: BigNumber;
        msgFee: BigNumber;
        dstGasPrice: BigNumber;
      }
    >;

    getOperator(
      overrides?: CallOverrides
    ): Promise<[string] & { operator: string }>;

    getOptimismGasPriceOracle(
      overrides?: CallOverrides
    ): Promise<[string] & { optimismGasPriceOracle: string }>;

    init(
      initPayload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lzReceive(
      arg0: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BigNumberish>,
      _payload: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    send(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      toChain: PromiseOrValue<BigNumberish>,
      msgSender: PromiseOrValue<string>,
      msgValue: PromiseOrValue<BigNumberish>,
      crossChainPayload: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      adminAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBridge(
      bridge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setGasParameters(uint32[],(uint256,uint256,uint256,uint256,uint256,uint256)[])"(
      chainIds: PromiseOrValue<BigNumberish>[],
      gasParameters: GasParametersStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setGasParameters(uint32,(uint256,uint256,uint256,uint256,uint256,uint256))"(
      chainId: PromiseOrValue<BigNumberish>,
      gasParameters: GasParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInterfaces(
      interfaces: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLZEndpoint(
      lZEndpoint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOperator(
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOptimismGasPriceOracle(
      optimismGasPriceOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  admin(overrides?: CallOverrides): Promise<string>;

  adminCall(
    target: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAdmin(overrides?: CallOverrides): Promise<string>;

  getBridge(overrides?: CallOverrides): Promise<string>;

  getGasParameters(
    chainId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<GasParametersStructOutput>;

  getHlgFee(
    toChain: PromiseOrValue<BigNumberish>,
    gasLimit: PromiseOrValue<BigNumberish>,
    gasPrice: PromiseOrValue<BigNumberish>,
    crossChainPayload: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getInterfaces(overrides?: CallOverrides): Promise<string>;

  getLZEndpoint(overrides?: CallOverrides): Promise<string>;

  getMessageFee(
    toChain: PromiseOrValue<BigNumberish>,
    gasLimit: PromiseOrValue<BigNumberish>,
    gasPrice: PromiseOrValue<BigNumberish>,
    crossChainPayload: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      hlgFee: BigNumber;
      msgFee: BigNumber;
      dstGasPrice: BigNumber;
    }
  >;

  getOperator(overrides?: CallOverrides): Promise<string>;

  getOptimismGasPriceOracle(overrides?: CallOverrides): Promise<string>;

  init(
    initPayload: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lzReceive(
    arg0: PromiseOrValue<BigNumberish>,
    _srcAddress: PromiseOrValue<BytesLike>,
    arg2: PromiseOrValue<BigNumberish>,
    _payload: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  send(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    toChain: PromiseOrValue<BigNumberish>,
    msgSender: PromiseOrValue<string>,
    msgValue: PromiseOrValue<BigNumberish>,
    crossChainPayload: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    adminAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBridge(
    bridge: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setGasParameters(uint32[],(uint256,uint256,uint256,uint256,uint256,uint256)[])"(
    chainIds: PromiseOrValue<BigNumberish>[],
    gasParameters: GasParametersStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setGasParameters(uint32,(uint256,uint256,uint256,uint256,uint256,uint256))"(
    chainId: PromiseOrValue<BigNumberish>,
    gasParameters: GasParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInterfaces(
    interfaces: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLZEndpoint(
    lZEndpoint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOperator(
    operator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOptimismGasPriceOracle(
    optimismGasPriceOracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    adminCall(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAdmin(overrides?: CallOverrides): Promise<string>;

    getBridge(overrides?: CallOverrides): Promise<string>;

    getGasParameters(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<GasParametersStructOutput>;

    getHlgFee(
      toChain: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      crossChainPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInterfaces(overrides?: CallOverrides): Promise<string>;

    getLZEndpoint(overrides?: CallOverrides): Promise<string>;

    getMessageFee(
      toChain: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      crossChainPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        hlgFee: BigNumber;
        msgFee: BigNumber;
        dstGasPrice: BigNumber;
      }
    >;

    getOperator(overrides?: CallOverrides): Promise<string>;

    getOptimismGasPriceOracle(overrides?: CallOverrides): Promise<string>;

    init(
      initPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    lzReceive(
      arg0: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BigNumberish>,
      _payload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    send(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      toChain: PromiseOrValue<BigNumberish>,
      msgSender: PromiseOrValue<string>,
      msgValue: PromiseOrValue<BigNumberish>,
      crossChainPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAdmin(
      adminAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBridge(
      bridge: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setGasParameters(uint32[],(uint256,uint256,uint256,uint256,uint256,uint256)[])"(
      chainIds: PromiseOrValue<BigNumberish>[],
      gasParameters: GasParametersStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setGasParameters(uint32,(uint256,uint256,uint256,uint256,uint256,uint256))"(
      chainId: PromiseOrValue<BigNumberish>,
      gasParameters: GasParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setInterfaces(
      interfaces: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLZEndpoint(
      lZEndpoint: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperator(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOptimismGasPriceOracle(
      optimismGasPriceOracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    admin(overrides?: CallOverrides): Promise<BigNumber>;

    adminCall(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    getBridge(overrides?: CallOverrides): Promise<BigNumber>;

    getGasParameters(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHlgFee(
      toChain: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      crossChainPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInterfaces(overrides?: CallOverrides): Promise<BigNumber>;

    getLZEndpoint(overrides?: CallOverrides): Promise<BigNumber>;

    getMessageFee(
      toChain: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      crossChainPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOperator(overrides?: CallOverrides): Promise<BigNumber>;

    getOptimismGasPriceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      initPayload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lzReceive(
      arg0: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BigNumberish>,
      _payload: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    send(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      toChain: PromiseOrValue<BigNumberish>,
      msgSender: PromiseOrValue<string>,
      msgValue: PromiseOrValue<BigNumberish>,
      crossChainPayload: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAdmin(
      adminAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBridge(
      bridge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setGasParameters(uint32[],(uint256,uint256,uint256,uint256,uint256,uint256)[])"(
      chainIds: PromiseOrValue<BigNumberish>[],
      gasParameters: GasParametersStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setGasParameters(uint32,(uint256,uint256,uint256,uint256,uint256,uint256))"(
      chainId: PromiseOrValue<BigNumberish>,
      gasParameters: GasParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInterfaces(
      interfaces: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLZEndpoint(
      lZEndpoint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOperator(
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOptimismGasPriceOracle(
      optimismGasPriceOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adminCall(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGasParameters(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHlgFee(
      toChain: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      crossChainPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInterfaces(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLZEndpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMessageFee(
      toChain: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      crossChainPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOperator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOptimismGasPriceOracle(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      initPayload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lzReceive(
      arg0: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BigNumberish>,
      _payload: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    send(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      toChain: PromiseOrValue<BigNumberish>,
      msgSender: PromiseOrValue<string>,
      msgValue: PromiseOrValue<BigNumberish>,
      crossChainPayload: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      adminAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBridge(
      bridge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setGasParameters(uint32[],(uint256,uint256,uint256,uint256,uint256,uint256)[])"(
      chainIds: PromiseOrValue<BigNumberish>[],
      gasParameters: GasParametersStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setGasParameters(uint32,(uint256,uint256,uint256,uint256,uint256,uint256))"(
      chainId: PromiseOrValue<BigNumberish>,
      gasParameters: GasParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInterfaces(
      interfaces: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLZEndpoint(
      lZEndpoint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOperator(
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOptimismGasPriceOracle(
      optimismGasPriceOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
